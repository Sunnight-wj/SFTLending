{
  "address": "0x81a1A58925e9e95e7b8E51054Fb27aAaaaF2499e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowRate",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DistributeSingleReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalCollteral",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Pledge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardsToRepay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldDistributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDistributor",
          "type": "address"
        }
      ],
      "name": "SetDistributor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldInterestRateStrategyAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInterestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "SetInterestRateStrategyAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "oldReserveFactor",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newReserveFactor",
          "type": "uint16"
        }
      ],
      "name": "SetReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unpledge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "userList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rewardList",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "filToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getMaxUnpledgeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxUnpledgeAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentLiquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentVariableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint16",
              "name": "reserveFactor",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "ltv",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "liquidationThreshold",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "sFilTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.ReserveData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserveNormalizedVariableDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserAccountData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "availableBorrows",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "healthFactor",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUtilizationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "utilizationRate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_filToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sftToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sFilTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_variableDebtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_interestRateStrategyAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_reserveFactor",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_ltv",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_liquidationThreshold",
          "type": "uint16"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "pledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pledges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "liquidityIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "variableBorrowIndex",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "currentLiquidityRate",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "currentVariableBorrowRate",
          "type": "uint128"
        },
        {
          "internalType": "uint40",
          "name": "lastUpdateTimestamp",
          "type": "uint40"
        },
        {
          "internalType": "uint16",
          "name": "reserveFactor",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "ltv",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "liquidationThreshold",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "sFilTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "variableDebtTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interestRateStrategyAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newDistributor",
          "type": "address"
        }
      ],
      "name": "setDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newInterestRateStrategyAddress",
          "type": "address"
        }
      ],
      "name": "setInterestRateStrategyAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newReserveFactor",
          "type": "uint16"
        }
      ],
      "name": "setReserveFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sftToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unpledge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasuryAddress",
          "type": "address"
        }
      ],
      "name": "updateTreasuryAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xca25a216c6069370c2c436ffda2e0aea16fed9fe4a2d780dda82201758835ec8",
  "receipt": {
    "to": null,
    "from": "0x49554923b9361e158Fb267B436f843a4f537D53a",
    "contractAddress": "0x81a1A58925e9e95e7b8E51054Fb27aAaaaF2499e",
    "transactionIndex": 3,
    "gasUsed": "3074493",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xeff49889fec9aa903d364c8e147d92dd5039ceefe4a8b9f9b6148c41364ee88b",
    "transactionHash": "0xca25a216c6069370c2c436ffda2e0aea16fed9fe4a2d780dda82201758835ec8",
    "logs": [],
    "blockNumber": 30815986,
    "cumulativeGasUsed": "3408755",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c1c96c2645a542398b32a9238f997f11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowRate\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DistributeSingleReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalCollteral\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Pledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardsToRepay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldDistributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"SetDistributor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldInterestRateStrategyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInterestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"SetInterestRateStrategyAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"oldReserveFactor\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newReserveFactor\",\"type\":\"uint16\"}],\"name\":\"SetReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unpledge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HEALTH_FACTOR_LIQUIDATION_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rewardList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"filToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxUnpledgeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxUnpledgeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ltv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sFilTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.ReserveData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserveNormalizedVariableDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserAccountData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableBorrows\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"healthFactor\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUtilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_filToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sftToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sFilTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_ltv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_liquidationThreshold\",\"type\":\"uint16\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"pledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pledges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"reserveFactor\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ltv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"liquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"sFilTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDistributor\",\"type\":\"address\"}],\"name\":\"setDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newInterestRateStrategyAddress\",\"type\":\"address\"}],\"name\":\"setInterestRateStrategyAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newReserveFactor\",\"type\":\"uint16\"}],\"name\":\"setReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sftToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unpledge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasuryAddress\",\"type\":\"address\"}],\"name\":\"updateTreasuryAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"borrow(uint256)\":{\"details\":\"Allows users to borrow a specific `amount` of FIL, provided that the borrower already deposited enough collateral\",\"params\":{\"amount\":\"The amount to be borrowed*\"}},\"deposit(uint256,address)\":{\"details\":\"Deposits an `amount` of FIL into the reserve, receiving equivalent sFIL in return.\",\"params\":{\"amount\":\"The amount to be deposited\",\"onBehalfOf\":\"The address that will receive the sFIL, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of sFIL   is a different wallet*\"}},\"getReserveNormalizedIncome()\":{\"details\":\"Returns the normalized income normalized income of the reserve\",\"returns\":{\"_0\":\"The reserve's normalized income\"}},\"getReserveNormalizedVariableDebt()\":{\"details\":\"Returns the normalized variable debt per unit of FIL\",\"returns\":{\"_0\":\"The reserve normalized variable debt\"}},\"liquidate(address)\":{\"details\":\"Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\",\"params\":{\"user\":\"The address of the borrower getting liquidated to receive the underlying collateral asset directly*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"pledge(uint256,address)\":{\"details\":\"pledge an `amount` of SFT for borrowing FIL from the pool\",\"params\":{\"amount\":\"The amount of SFT\",\"onBehalfOf\":\"The address that will receive the SFT as collateral,same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary is a different wallet\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repay(uint256,address)\":{\"params\":{\"amount\":\"The amount to repay - Send the value type(uint256).max in order to repay the whole debt\",\"onBehalfOf\":\"Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed\"},\"returns\":{\"_0\":\"The final amount repaid*\"}},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"},\"unpledge(uint256)\":{\"details\":\"unpledge an `amount` of SFT from the pool, can't cause totalDebt > totalCollateral * ltv\",\"params\":{\"amount\":\"The amount of SFT   - Send the value type(uint256).max in order to unpledge the max amount you can unpledge\"}},\"withdraw(uint256,address)\":{\"details\":\"Withdraws an `amount` of FIL from the reserve, burning the equivalent sFIL owned\",\"params\":{\"amount\":\"The FIL amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole sFIL balance\",\"to\":\"Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet\"},\"returns\":{\"_0\":\"The final amount withdrawn*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"repay(uint256,address)\":{\"notice\":\"Repays a borrowed `amount` of FIL, burning the equivalent debt tokens owned\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lendingpool/LendingPool.sol\":\"LendingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x84efb8889801b0ac817324aff6acc691d07bbee816b671817132911d287a8c63\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/helper/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./WadRayMath.sol\\\";\\r\\n\\r\\nlibrary MathUtils {\\r\\n  using SafeMath for uint256;\\r\\n  using WadRayMath for uint256;\\r\\n\\r\\n  /// @dev Ignoring leap years\\r\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\r\\n\\r\\n  /**\\r\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\r\\n   * @param rate The interest rate, in ray\\r\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\r\\n   **/\\r\\n\\r\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    //solium-disable-next-line\\r\\n    uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\r\\n\\r\\n    return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\r\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\r\\n   *\\r\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\r\\n   *\\r\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\r\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\r\\n   *\\r\\n   * @param rate The interest rate, in ray\\r\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n   * @return The interest rate compounded during the timeDelta, in ray\\r\\n   **/\\r\\n  function calculateCompoundedInterest(\\r\\n    uint256 rate,\\r\\n    uint40 lastUpdateTimestamp,\\r\\n    uint256 currentTimestamp\\r\\n  ) internal pure returns (uint256) {\\r\\n    //solium-disable-next-line\\r\\n    uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\r\\n\\r\\n    if (exp == 0) {\\r\\n      return WadRayMath.ray();\\r\\n    }\\r\\n\\r\\n    uint256 expMinusOne = exp - 1;\\r\\n\\r\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\r\\n\\r\\n    uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\r\\n\\r\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\r\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\r\\n\\r\\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\r\\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\r\\n\\r\\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\r\\n   * @param rate The interest rate (in ray)\\r\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\r\\n   **/\\r\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe6e81edc1fea37c8f7d9aed7571f34d7d2bd13b338bb1ccd5b21392bac229ee6\",\"license\":\"MIT\"},\"contracts/helper/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title PercentageMath library\\r\\n * @notice Provides functions to perform percentage calculations\\r\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\r\\n * @dev Operations are rounded half up\\r\\n **/\\r\\n\\r\\nlibrary PercentageMath {\\r\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\r\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage multiplication\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The percentage of value\\r\\n   **/\\r\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    if (value == 0 || percentage == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(\\r\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\r\\n      \\\"MULTIPLICATION_OVERFLOW\\\"\\r\\n    );\\r\\n\\r\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage division\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The value divided the percentage\\r\\n   **/\\r\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    require(percentage != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\r\\n    uint256 halfPercentage = percentage / 2;\\r\\n\\r\\n    require(\\r\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\r\\n      \\\"MULTIPLICATION_OVERFLOW\\\"\\r\\n    );\\r\\n\\r\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xad1b7bc18889bfa1d4b4ccf4b0470ce6d4f8b498eadcfa1910b5307f6ebe86b1\",\"license\":\"MIT\"},\"contracts/helper/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\r\\n **/\\r\\n\\r\\nlibrary WadRayMath {\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant halfWAD = WAD / 2;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant halfRAY = RAY / 2;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  /**\\r\\n   * @return One ray, 1e27\\r\\n   **/\\r\\n  function ray() internal pure returns (uint256) {\\r\\n    return RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return One wad, 1e18\\r\\n   **/\\r\\n\\r\\n  function wad() internal pure returns (uint256) {\\r\\n    return WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e27/2\\r\\n   **/\\r\\n  function halfRay() internal pure returns (uint256) {\\r\\n    return halfRAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e18/2\\r\\n   **/\\r\\n  function halfWad() internal pure returns (uint256) {\\r\\n    return halfWAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a*b, in wad\\r\\n   **/\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - halfWAD) / b, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * b + halfWAD) / WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a/b, in wad\\r\\n   **/\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"DIVISION_BY_ZERO\\\");\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / WAD, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * WAD + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a*b, in ray\\r\\n   **/\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - halfRAY) / b, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * b + halfRAY) / RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a/b, in ray\\r\\n   **/\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"DIVISION_BY_ZERO\\\");\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / RAY, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * RAY + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Casts ray down to wad\\r\\n   * @param a Ray\\r\\n   * @return a casted to wad, rounded half up to the nearest wad\\r\\n   **/\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\r\\n    uint256 result = halfRatio + a;\\r\\n    require(result >= halfRatio, \\\"ADDITION_OVERFLOW\\\");\\r\\n\\r\\n    return result / WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts wad up to ray\\r\\n   * @param a Wad\\r\\n   * @return a converted in ray\\r\\n   **/\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 result = a * WAD_RAY_RATIO;\\r\\n    require(result / WAD_RAY_RATIO == a, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x66ec27b84b1e5fd32fcb02768b1794d147508a9ae007d7ad5c30231801b2c9f1\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface ILendingPool {\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on deposit()\\r\\n   * @param user The address initiating the deposit\\r\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the sFIL\\r\\n   * @param amount The amount deposited\\r\\n   **/\\r\\n  event Deposit(\\r\\n    address user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint amount\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Deposits an `amount` of FIL into the reserve, receiving equivalent sFIL in return.\\r\\n   * @param amount The amount to be deposited\\r\\n   * @param onBehalfOf The address that will receive the sFIL, same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of sFIL\\r\\n   *   is a different wallet\\r\\n   **/\\r\\n  function deposit(uint amount, address onBehalfOf) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on withdraw()\\r\\n   * @param user The address initiating the withdrawal, owner of sFIL\\r\\n   * @param to Address that will receive the underlying\\r\\n   * @param amount The amount to be withdrawn\\r\\n   **/\\r\\n  event Withdraw(address indexed user, address indexed to, uint amount);\\r\\n\\r\\n  /**\\r\\n   * @dev Withdraws an `amount` of FIL from the reserve, burning the equivalent sFIL owned\\r\\n   * @param amount The FIL amount to be withdrawn\\r\\n   *   - Send the value type(uint).max in order to withdraw the whole aToken balance\\r\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n   *   different wallet\\r\\n   * @return The final amount withdrawn\\r\\n   **/\\r\\n  function withdraw(uint amount, address to) external returns (uint);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on pledge()\\r\\n   * @param user The address initiating the pledge\\r\\n   * @param onBehalfOf The beneficiary of the pledge\\r\\n   * @param amount The amount of SFT pledged\\r\\n   **/\\r\\n  event Pledge(address user, address indexed onBehalfOf, uint amount);\\r\\n\\r\\n  /**\\r\\n   * @dev pledge an `amount` of SFT for borrowing FIL from the pool\\r\\n   * @param amount The amount of SFT\\r\\n   * @param onBehalfOf The address that will receive the SFT as collateral,same as msg.sender if the user\\r\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary is a different wallet\\r\\n   */\\r\\n  function pledge(uint amount, address onBehalfOf) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on Unpledge()\\r\\n   * @param user The address initiating the unpledge\\r\\n   * @param amount The amount of SFT unpledged\\r\\n   **/\\r\\n  event Unpledge(address user, uint amount);\\r\\n\\r\\n  /**\\r\\n   * @dev unpledge an `amount` of SFT from the pool\\r\\n   * @param amount The amount of SFT\\r\\n   */\\r\\n  function unpledge(uint amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on borrow() when debt needs to be opened\\r\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow()\\r\\n   * @param amount The amount borrowed out\\r\\n   * @param borrowRate The numeric rate at which the user has borrowed\\r\\n   **/\\r\\n  event Borrow(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 borrowRate\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Allows users to borrow a specific `amount` of FIL, provided that the borrower already deposited enough collateral\\r\\n   * @param amount The amount to be borrowed\\r\\n   **/\\r\\n  function borrow(uint amount) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted on repay()\\r\\n   * @param user The address of the user initiating the repay(), providing the funds\\r\\n   * @param onBehalfOf The beneficiary of the repayment, getting his debt reduced\\r\\n   * @param paybackAmount The amount repaid\\r\\n   * @param rewardsToRepay The amount of rewards to cover debt\\r\\n   * @param margin The amount of FIL user actually need transfer \\r\\n   **/\\r\\n  event Repay(\\r\\n    address indexed user,\\r\\n    address indexed onBehalfOf,\\r\\n    uint256 paybackAmount,\\r\\n    uint256 rewardsToRepay,\\r\\n    uint256 margin\\r\\n  );\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @notice Repays a borrowed `amount` of FIL, burning the equivalent debt tokens owned\\r\\n   * @param amount The amount to repay\\r\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\r\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n   * other borrower whose debt should be removed\\r\\n   * @return The final amount repaid\\r\\n   **/\\r\\n  function repay(uint amount, address onBehalfOf) external returns (uint);\\r\\n\\r\\n/**\\r\\n  * @dev Emitted on liquidate()\\r\\n  * @param liquidator The address of the liquidator\\r\\n  * @param user The address of the borrower getting liquidated\\r\\n  * @param totalDebt The user's totalDebt that liquidator need to cover\\r\\n  * @param totalCollteral The user's totalCollteral SFT liquidator will receive\\r\\n  */\\r\\n  event Liquidate(address liquidator, address indexed user, uint totalDebt, uint totalCollteral);\\r\\n\\r\\n /**\\r\\n  * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n  * @param user The address of the borrower getting liquidated\\r\\n  * to receive the underlying collateral asset directly\\r\\n  **/    \\r\\n  function liquidate(address user) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized income normalized income of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome() external view returns (uint);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized variable debt per unit of asset\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt() external view returns (uint);\\r\\n\\r\\n  event DistributeSingleReward(address distributor, address user, uint amount);\\r\\n  event ClaimReward(address user, uint amount);\\r\\n  event SetDistributor(address oldDistributor, address newDistributor);\\r\\n  event SetReserveFactor(uint16 oldReserveFactor, uint16 newReserveFactor);\\r\\n  event SetInterestRateStrategyAddress(address oldInterestRateStrategyAddress, address newInterestRateStrategyAddress);\\r\\n}\",\"keccak256\":\"0x49d0e123be9c75535fd10ab5e77a096ae99c1a82b9961d3b976f3c63d0d85133\",\"license\":\"MIT\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IReserveInterestRateStrategy {\\r\\n\\r\\n  function baseVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  function calculateInterestRates(\\r\\n    uint256 availableLiquidity,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 reserveFactor\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  function calculateInterestRates(\\r\\n    address reserve,\\r\\n    address aToken,\\r\\n    uint256 liquidityAdded,\\r\\n    uint256 liquidityTaken,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 reserveFactor\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 liquidityRate,\\r\\n      uint256 variableBorrowRate\\r\\n    );\\r\\n}\",\"keccak256\":\"0x328119369d84470715d113a584fbbaa6631d6648a7da6a5d8fd6d8dff08e2b7a\",\"license\":\"MIT\"},\"contracts/interfaces/ISFilToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\ninterface ISFilToken is IERC20, IScaledBalanceToken {\\r\\n\\r\\n    /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param from The address performing the mint\\r\\n   * @param value The amount being\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed from, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `amount` sFIL to `user`\\r\\n   * @param user The address receiving the minted tokens\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   */\\r\\n  function mint(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n\\r\\n   /**\\r\\n   * @dev Emitted after sFIL are burned\\r\\n   * @param from The owner of the sFIL, getting them burned\\r\\n   * @param target The address that will receive the underlying\\r\\n   * @param value The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted during the transfer action\\r\\n   * @param from The user whose tokens are being transferred\\r\\n   * @param to The recipient\\r\\n   * @param value The amount being transferred\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns sFIL from `user` and sends the equivalent amount of FIL to `receiver`\\r\\n   * @param user The owner of the sFIL, getting them burned\\r\\n   * @param receiver The address that will receive the FIL\\r\\n   * @param amount The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  function burn(\\r\\n    address user,\\r\\n    address receiver,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Mints sFIL to the reserve treasury\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   */\\r\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\r\\n   * assets in borrow(), withdraw()\\r\\n   * @param user The recipient of the underlying\\r\\n   * @param amount The amount getting transferred\\r\\n   * @return The amount transferred\\r\\n   **/\\r\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the underlying asset\\r\\n   **/\\r\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n\\r\\n  function updateTreasuryAddress(address newTreasuryAddress) external;\\r\\n    \\r\\n}\",\"keccak256\":\"0x4cc2d00941b27fb1aade83dec2b9f35a359edecd1b66f159a3ac37a369599d59\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IScaledBalanceToken {\\r\\n  /**\\r\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\r\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\r\\n   * @param user The user whose balance is calculated\\r\\n   * @return The scaled balance of the user\\r\\n   **/\\r\\n  function scaledBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\r\\n   * @param user The address of the user\\r\\n   * @return The scaled balance of the user\\r\\n   * @return The scaled balance and the scaled total supply\\r\\n   **/\\r\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\r\\n   * @return The scaled total supply\\r\\n   **/\\r\\n  function scaledTotalSupply() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xb898eb43a9e67097a24e4c6a63b00e8f0e77e33a46677ed5d6529207282dc97b\",\"license\":\"MIT\"},\"contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\ninterface IVariableDebtToken is IScaledBalanceToken {\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param user The address performing the mint\\r\\n   * @param value The amount to be minted\\r\\n   * @param index The last index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed user, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints debt token to the `onBehalfOf` address\\r\\n   * @param user The address receiving the borrowed underlying and the debt token\\r\\n   * @param amount The amount of debt being minted\\r\\n   * @param index The variable debt index of the reserve\\r\\n   **/\\r\\n  function mint(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when variable debt is burnt\\r\\n   * @param user The user which debt has been burned\\r\\n   * @param amount The amount of debt being burned\\r\\n   * @param index The index of the user\\r\\n   **/\\r\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns user variable debt\\r\\n   * @param user The user which debt is burnt\\r\\n   * @param index The variable debt index of the reserve\\r\\n   **/\\r\\n  function burn(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n}\",\"keccak256\":\"0x264b53c527d943ba2bf623bc81100ba006399d6226840fc5eaf262abd9e98647\",\"license\":\"MIT\"},\"contracts/lendingpool/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/ISFilToken.sol\\\";\\r\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\r\\nimport \\\"../interfaces/IVariableDebtToken.sol\\\";\\r\\nimport \\\"./logic/ReserveLogic.sol\\\";\\r\\nimport \\\"./logic/GenericLogic.sol\\\";\\r\\nimport \\\"../helper/PercentageMath.sol\\\";\\r\\nimport \\\"../types/DataTypes.sol\\\";\\r\\n\\r\\n\\r\\ncontract LendingPool is ILendingPool, Ownable2StepUpgradeable {\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using PercentageMath for uint256;\\r\\n\\r\\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\\r\\n    uint256 public constant RAY = 1e27;\\r\\n\\r\\n    address public filToken;\\r\\n    address public sftToken;\\r\\n    address public distributor;\\r\\n    DataTypes.ReserveData public reserve;\\r\\n    mapping (address => uint) public pledges; // address => SFT amount\\r\\n    mapping (address => uint) public rewards; // plege SFT also can earn rewards\\r\\n\\r\\n    function initialize(\\r\\n        address _filToken,\\r\\n        address _sftToken,\\r\\n        address _distributor,\\r\\n        address _sFilTokenAddress,\\r\\n        address _variableDebtTokenAddress,\\r\\n        address _interestRateStrategyAddress,\\r\\n        uint16 _reserveFactor,\\r\\n        uint16 _ltv,\\r\\n        uint16 _liquidationThreshold\\r\\n        ) external initializer {\\r\\n        require(address(_filToken) != address(0), \\\"fil token address cannot be zero\\\");\\r\\n        require(address(_sftToken) != address(0), \\\"SFT token address cannot be zero\\\");\\r\\n        require(address(_sFilTokenAddress) != address(0), \\\"sFil token address cannot be zero\\\");\\r\\n        require(address(_variableDebtTokenAddress) != address(0), \\\"variableDebt token address cannot be zero\\\");\\r\\n        require(address(_interestRateStrategyAddress) != address(0), \\\"interestRateStrategy address cannot be zero\\\");\\r\\n        __Context_init_unchained();\\r\\n        __Ownable_init_unchained();\\r\\n        filToken = _filToken;\\r\\n        sftToken = _sftToken;\\r\\n        _setDistributor(_distributor);\\r\\n        reserve.sFilTokenAddress = _sFilTokenAddress;\\r\\n        reserve.variableDebtTokenAddress = _variableDebtTokenAddress;\\r\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\r\\n        reserve.reserveFactor = _reserveFactor;\\r\\n        reserve.ltv = _ltv;\\r\\n        reserve.liquidationThreshold = _liquidationThreshold;\\r\\n        reserve.liquidityIndex = uint128(RAY);\\r\\n        reserve.variableBorrowIndex = uint128(RAY);\\r\\n    }\\r\\n\\r\\n    function setDistributor(address newDistributor) external onlyOwner {\\r\\n        _setDistributor(newDistributor);\\r\\n    }\\r\\n\\r\\n    function _setDistributor(address _distributor) private {\\r\\n        emit SetDistributor(distributor, _distributor);\\r\\n        distributor = _distributor;\\r\\n    }\\r\\n\\r\\n    function setReserveFactor(uint16 newReserveFactor) external onlyOwner {\\r\\n        _setReserveFactor(newReserveFactor);\\r\\n    }\\r\\n\\r\\n    function _setReserveFactor(uint16 _reserveFactor) private {\\r\\n        emit SetReserveFactor(reserve.reserveFactor, _reserveFactor);\\r\\n        reserve.reserveFactor = _reserveFactor;\\r\\n    }\\r\\n\\r\\n    function setInterestRateStrategyAddress(address newInterestRateStrategyAddress) external onlyOwner {\\r\\n        _setInterestRateStrategyAddress(newInterestRateStrategyAddress);\\r\\n    }\\r\\n\\r\\n    function _setInterestRateStrategyAddress(address _interestRateStrategyAddress) private {\\r\\n        emit SetInterestRateStrategyAddress(reserve.interestRateStrategyAddress, _interestRateStrategyAddress);\\r\\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\\r\\n    }\\r\\n\\r\\n    function updateTreasuryAddress(address newTreasuryAddress) external onlyOwner {\\r\\n        ISFilToken(reserve.sFilTokenAddress).updateTreasuryAddress(newTreasuryAddress);\\r\\n    }\\r\\n\\r\\n    function getReserveData() public view returns (DataTypes.ReserveData memory) {\\r\\n        return reserve;\\r\\n    }\\r\\n\\r\\n    function getUserAccountData(address user) public view returns (\\r\\n        uint totalCollateral,\\r\\n        uint totalDebt,\\r\\n        uint availableBorrows,\\r\\n        uint healthFactor\\r\\n    ) {\\r\\n        totalCollateral = pledges[user];\\r\\n        totalDebt = IERC20(reserve.variableDebtTokenAddress).balanceOf(user);\\r\\n        availableBorrows = GenericLogic.calculateAvailableBorrow(totalCollateral, totalDebt, reserve.ltv);\\r\\n        healthFactor = GenericLogic.calculateHealthFactor(totalCollateral, totalDebt, reserve.liquidationThreshold);\\r\\n    }\\r\\n\\r\\n    function getUtilizationRate() public view returns (uint utilizationRate) {\\r\\n        uint totalDebt = IERC20(reserve.variableDebtTokenAddress).totalSupply();\\r\\n        uint availableLiquidity = IERC20(filToken).balanceOf(reserve.sFilTokenAddress);\\r\\n        utilizationRate = totalDebt == 0 ? 0 : totalDebt / (totalDebt + availableLiquidity);\\r\\n    }\\r\\n\\r\\n    function getMaxUnpledgeAmount(address user) public view returns (uint maxUnpledgeAmount) {\\r\\n        (uint totalCollateral, uint totalDebt, , ) = getUserAccountData(user);\\r\\n        maxUnpledgeAmount = totalDebt == 0 ? totalCollateral : totalCollateral - totalDebt.percentDiv(reserve.ltv);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * @dev Deposits an `amount` of FIL into the reserve, receiving equivalent sFIL in return.\\r\\n     * @param amount The amount to be deposited\\r\\n     * @param onBehalfOf The address that will receive the sFIL, same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of sFIL\\r\\n     *   is a different wallet\\r\\n     **/\\r\\n    function deposit(uint amount, address onBehalfOf) external {\\r\\n        address sFilToken = reserve.sFilTokenAddress;\\r\\n        reserve.updateState();\\r\\n        reserve.updateInterestRates(filToken, sFilToken, amount, 0);\\r\\n        IERC20(filToken).safeTransferFrom(address(msg.sender), sFilToken, amount);\\r\\n        ISFilToken(sFilToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\\r\\n        emit Deposit(msg.sender, onBehalfOf, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraws an `amount` of FIL from the reserve, burning the equivalent sFIL owned\\r\\n     * @param amount The FIL amount to be withdrawn\\r\\n     *   - Send the value type(uint256).max in order to withdraw the whole sFIL balance\\r\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\r\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\r\\n     *   different wallet\\r\\n     * @return The final amount withdrawn\\r\\n     **/\\r\\n    function withdraw(uint amount, address to) external returns (uint) {\\r\\n        address sFilToken = reserve.sFilTokenAddress;\\r\\n        uint userBalance = ISFilToken(sFilToken).balanceOf(address(msg.sender));\\r\\n        uint256 amountToWithdraw = amount >= userBalance ? userBalance : amount;\\r\\n        reserve.updateState();\\r\\n        reserve.updateInterestRates(filToken, sFilToken, 0, amountToWithdraw);\\r\\n        ISFilToken(sFilToken).burn(address(msg.sender), to, amountToWithdraw, reserve.liquidityIndex);\\r\\n        emit Withdraw(msg.sender, to, amountToWithdraw);\\r\\n        return amountToWithdraw;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev pledge an `amount` of SFT for borrowing FIL from the pool\\r\\n     * @param amount The amount of SFT\\r\\n     * @param onBehalfOf The address that will receive the SFT as collateral,same as msg.sender if the user\\r\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary is a different wallet\\r\\n     */\\r\\n    function pledge(uint amount, address onBehalfOf) external {\\r\\n        require(IERC20(sftToken).allowance(address(msg.sender), address(this)) >= amount, \\\"SFT_APPROVE_NOT_ENOUGH\\\");\\r\\n        require(IERC20(sftToken).balanceOf(address(msg.sender)) >= amount, \\\"SFT_BALANCE_NOT_ENOUGH\\\");\\r\\n        reserve.updateState();\\r\\n        reserve.updateInterestRates(filToken, reserve.sFilTokenAddress, 0, 0);\\r\\n        IERC20(sftToken).safeTransferFrom(address(msg.sender), address(this), amount);\\r\\n        pledges[onBehalfOf] += amount;\\r\\n        emit Pledge(msg.sender, onBehalfOf, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev unpledge an `amount` of SFT from the pool, can't cause totalDebt > totalCollateral * ltv\\r\\n     * @param amount The amount of SFT\\r\\n     *   - Send the value type(uint256).max in order to unpledge the max amount you can unpledge\\r\\n     */\\r\\n    function unpledge(uint amount) external {\\r\\n        uint maxUnpledgeAmount = getMaxUnpledgeAmount(msg.sender);\\r\\n        uint actualUnpledgeAmount =  amount >= maxUnpledgeAmount ? maxUnpledgeAmount : amount;\\r\\n        // uint totalCollateral = pledges[msg.sender] - amount;\\r\\n        // uint totalDebt = IERC20(reserve.variableDebtTokenAddress).balanceOf(address(msg.sender));\\r\\n        // require(totalCollateral.percentMul(reserve.ltv) >= totalDebt, \\\"INVALID_AMOUNT\\\");\\r\\n        reserve.updateState();\\r\\n        reserve.updateInterestRates(filToken, reserve.sFilTokenAddress, 0, 0);\\r\\n        pledges[msg.sender] -= actualUnpledgeAmount;\\r\\n        IERC20(sftToken).safeTransfer(address(msg.sender), actualUnpledgeAmount);\\r\\n        emit Unpledge(msg.sender, actualUnpledgeAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows users to borrow a specific `amount` of FIL, provided that the borrower already deposited enough collateral\\r\\n     * @param amount The amount to be borrowed\\r\\n     **/\\r\\n    function borrow(uint amount) external {\\r\\n        (, ,uint availableBorrows,) = getUserAccountData(address(msg.sender));\\r\\n        require(availableBorrows >= amount, \\\"AVAILABLE_BORROWS_NOT_ENOUGH\\\");\\r\\n        reserve.updateState();\\r\\n        IVariableDebtToken(reserve.variableDebtTokenAddress).mint(address(msg.sender), amount, reserve.variableBorrowIndex);\\r\\n        reserve.updateInterestRates(filToken, reserve.sFilTokenAddress, 0, amount);\\r\\n        ISFilToken(reserve.sFilTokenAddress).transferUnderlyingTo(address(msg.sender), amount);\\r\\n        emit Borrow(msg.sender, amount, reserve.currentVariableBorrowRate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Repays a borrowed `amount` of FIL, burning the equivalent debt tokens owned\\r\\n     * @param amount The amount to repay\\r\\n     * - Send the value type(uint256).max in order to repay the whole debt\\r\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\r\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\r\\n     * other borrower whose debt should be removed\\r\\n     * @return The final amount repaid\\r\\n     **/\\r\\n    function repay(uint amount, address onBehalfOf) public returns (uint) {\\r\\n        uint256 margin = 0; // user actual need transfered FIL amount\\r\\n        uint256 userDebt = IERC20(reserve.variableDebtTokenAddress).balanceOf(onBehalfOf);\\r\\n        uint256 userRewards = rewards[address(msg.sender)];\\r\\n        uint paybackAmount = amount < userDebt? amount : userDebt;\\r\\n        uint256 rewardsToRepay = userRewards >= paybackAmount? paybackAmount : userRewards;\\r\\n        margin = paybackAmount - rewardsToRepay; // user actually need transfered FIL\\r\\n        \\r\\n        require(IERC20(filToken).allowance(address(msg.sender), address(this)) >= margin, \\\"FIL_ALLOWANCE_NOT_ENOUGH\\\");\\r\\n        require(IERC20(filToken).balanceOf(address(msg.sender)) >= margin, \\\"FIL_BALANCE_NOT_ENOUGH\\\");\\r\\n        reserve.updateState();\\r\\n        IVariableDebtToken(reserve.variableDebtTokenAddress).burn(onBehalfOf, paybackAmount, reserve.variableBorrowIndex);\\r\\n        address sFILToken = reserve.sFilTokenAddress;\\r\\n        reserve.updateInterestRates(filToken, sFILToken, paybackAmount, 0);\\r\\n        if (margin > 0) {\\r\\n            IERC20(filToken).safeTransferFrom(msg.sender, reserve.sFilTokenAddress, margin);\\r\\n        }\\r\\n        rewards[msg.sender] -= rewardsToRepay;\\r\\n        IERC20(filToken).safeTransfer(reserve.sFilTokenAddress, rewardsToRepay);\\r\\n        emit Repay(msg.sender, onBehalfOf, paybackAmount, rewardsToRepay, margin);\\r\\n        return paybackAmount;\\r\\n    }\\r\\n\\r\\n   /**\\r\\n    * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\r\\n    * @param user The address of the borrower getting liquidated\\r\\n    * to receive the underlying collateral asset directly\\r\\n    **/    \\r\\n    function liquidate(address user) external {\\r\\n        ( ,uint totalDebt, ,uint healthFactor) = getUserAccountData(user);\\r\\n        require(\\r\\n            healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\\r\\n            \\\"HEALTH_FACTOR_ABOVE_THRESHOLD\\\"\\r\\n        );\\r\\n        uint totalCollateral = pledges[user];\\r\\n        repay(totalDebt, user);\\r\\n        IERC20(sftToken).transfer(address(msg.sender), totalCollateral);\\r\\n        delete pledges[user];\\r\\n        emit Liquidate(msg.sender, user, totalDebt, totalCollateral);\\r\\n    }\\r\\n\\r\\n    function distributeReward(address[] calldata userList, uint[] calldata rewardList, uint totalRewards) external {\\r\\n        require(address(msg.sender) == distributor, \\\"ONLY_DISTRIBUTOR_CAN_CALL\\\");\\r\\n        require(userList.length == rewardList.length, \\\"INCORRECT_PARAM\\\");\\r\\n        require(IERC20(filToken).allowance(address(msg.sender), address(this)) >= totalRewards, \\\"FIL_TOKEN_APPROVE_NOT_ENOUGH\\\");\\r\\n        require(IERC20(filToken).balanceOf(address(msg.sender)) >= totalRewards, \\\"FIL_TOKEN_BALANCE_NOT_ENOUGH\\\");\\r\\n        for (uint i = 0; i < userList.length; i++) {\\r\\n            rewards[userList[i]] += rewardList[i];\\r\\n            emit DistributeSingleReward(distributor, userList[i], rewardList[i]);\\r\\n        }\\r\\n        IERC20(filToken).safeTransferFrom(address(msg.sender), address(this), totalRewards);\\r\\n    }\\r\\n\\r\\n    function claimReward() external {\\r\\n        require(pledges[msg.sender] == 0, \\\"MUST_UNPLEGE_ALL_COLLATERAL\\\");\\r\\n        uint claimAmount = rewards[msg.sender];\\r\\n        require(IERC20(filToken).balanceOf(address(this)) >= claimAmount);\\r\\n        delete rewards[msg.sender];\\r\\n        IERC20(filToken).safeTransfer(address(msg.sender), claimAmount);\\r\\n        emit ClaimReward(msg.sender, claimAmount);\\r\\n    }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized income normalized income of the reserve\\r\\n   * @return The reserve's normalized income\\r\\n   */\\r\\n  function getReserveNormalizedIncome() external view returns (uint256) {\\r\\n    return reserve.getNormalizedIncome();\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the normalized variable debt per unit of FIL\\r\\n   * @return The reserve normalized variable debt\\r\\n   */\\r\\n  function getReserveNormalizedVariableDebt() external view returns (uint256) {\\r\\n    return reserve.getNormalizedDebt();\\r\\n  }\\r\\n}\",\"keccak256\":\"0x20056a9dfa41a044526c709cbeb7a91a93113d1dab0703781bd14eb27e60e03f\",\"license\":\"MIT\"},\"contracts/lendingpool/logic/GenericLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../../types/DataTypes.sol\\\";\\r\\nimport \\\"../../helper/WadRayMath.sol\\\";\\r\\nimport \\\"../../helper/PercentageMath.sol\\\";\\r\\n\\r\\nlibrary GenericLogic {\\r\\n    using SafeMath for uint256;\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n\\r\\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the health factor\\r\\n   * @param totalCollateral The total collateral in ETH\\r\\n   * @param totalDebt The total debt in ETH\\r\\n   * @param liquidationThreshold The liquidation threshold\\r\\n   * @return The health factor calculated from the balances provided\\r\\n   **/\\r\\n  function calculateHealthFactor(\\r\\n    uint256 totalCollateral,\\r\\n    uint256 totalDebt,\\r\\n    uint256 liquidationThreshold\\r\\n  ) internal pure returns (uint256) {\\r\\n    if (totalDebt == 0) return type(uint256).max;\\r\\n\\r\\n    return (totalCollateral.percentMul(liquidationThreshold)).wadDiv(totalDebt);\\r\\n  }\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\\r\\n   * average Loan To Value\\r\\n   * @param totalCollateral The total SFT amount as collateral\\r\\n   * @param totalDebt The total borrow balance\\r\\n   * @param ltv The loan to value\\r\\n   * @return the amount available FIL to borrow for the user\\r\\n   **/\\r\\n  function calculateAvailableBorrow(\\r\\n    uint256 totalCollateral,\\r\\n    uint256 totalDebt,\\r\\n    uint256 ltv\\r\\n  ) external pure returns (uint256) {\\r\\n    uint256 availableBorrows = totalCollateral.percentMul(ltv);\\r\\n\\r\\n    if (availableBorrows < totalDebt) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    availableBorrows = availableBorrows.sub(totalDebt);\\r\\n    return availableBorrows;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xff8a7be0b8e567b12a067a574682fab36ca30b3d90c9d24aadb7d7000c2fdd97\",\"license\":\"MIT\"},\"contracts/lendingpool/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\r\\nimport \\\"../../interfaces/IVariableDebtToken.sol\\\";\\r\\nimport \\\"../../interfaces/ISFilToken.sol\\\";\\r\\nimport \\\"../../helper/WadRayMath.sol\\\";\\r\\nimport \\\"../../helper/PercentageMath.sol\\\";\\r\\nimport \\\"../../helper/MathUtils.sol\\\";\\r\\nimport \\\"../../types/DataTypes.sol\\\";\\r\\n\\r\\nlibrary ReserveLogic {\\r\\n    using SafeMath for uint256;\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n\\r\\n    /**\\r\\n   * @dev Emitted when the state of a reserve is updated\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The new liquidity rate\\r\\n   * @param variableBorrowRate The new variable borrow rate\\r\\n   * @param liquidityIndex The new liquidity index\\r\\n   * @param variableBorrowIndex The new variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed asset,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ongoing normalized income for the reserve\\r\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\r\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\r\\n   * @param reserve The reserve object\\r\\n   * @return the normalized income. expressed in ray\\r\\n   **/\\r\\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    if (timestamp == uint40(block.timestamp)) {\\r\\n      //if the index was updated in the same block, no need to perform any calculation\\r\\n      return reserve.liquidityIndex;\\r\\n    }\\r\\n\\r\\n    uint256 cumulated =\\r\\n      MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\r\\n        reserve.liquidityIndex\\r\\n      );\\r\\n    return cumulated;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ongoing normalized variable debt for the reserve\\r\\n   * A value of 1e27 means there is no debt. As time passes, the income is accrued\\r\\n   * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\r\\n   * @param reserve The reserve object\\r\\n   * @return The normalized variable debt. expressed in ray\\r\\n   **/\\r\\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    if (timestamp == uint40(block.timestamp)) {\\r\\n      //if the index was updated in the same block, no need to perform any calculation\\r\\n      return reserve.variableBorrowIndex;\\r\\n    }\\r\\n\\r\\n    uint256 cumulated =\\r\\n      MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\r\\n        reserve.variableBorrowIndex\\r\\n      );\\r\\n\\r\\n    return cumulated;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\\r\\n   * @param reserve the reserve object\\r\\n   **/\\r\\n  function updateState(DataTypes.ReserveData storage reserve) internal {\\r\\n    uint256 scaledVariableDebt =\\r\\n      IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\r\\n    uint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\r\\n    uint256 previousLiquidityIndex = reserve.liquidityIndex;\\r\\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    (uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) =\\r\\n      _updateIndexes(\\r\\n        reserve,\\r\\n        scaledVariableDebt,\\r\\n        previousLiquidityIndex,\\r\\n        previousVariableBorrowIndex,\\r\\n        lastUpdatedTimestamp\\r\\n      );\\r\\n\\r\\n    _mintToTreasury(\\r\\n      reserve,\\r\\n      scaledVariableDebt,\\r\\n      previousVariableBorrowIndex,\\r\\n      newLiquidityIndex,\\r\\n      newVariableBorrowIndex\\r\\n    );\\r\\n  }\\r\\n\\r\\n\\r\\n  struct UpdateInterestRatesLocalVars {\\r\\n    uint256 availableLiquidity;\\r\\n    uint256 newLiquidityRate;\\r\\n    uint256 newVariableRate;\\r\\n    uint256 totalVariableDebt;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve the current variable borrow rate and the current liquidity rate\\r\\n   * @param reserve The address of the reserve to be updated\\r\\n   * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\r\\n   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\r\\n   **/\\r\\n  function updateInterestRates(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    address reserveAddress,\\r\\n    address sFilTokenAddress,\\r\\n    uint256 liquidityAdded,\\r\\n    uint256 liquidityTaken\\r\\n  ) internal {\\r\\n    UpdateInterestRatesLocalVars memory vars;\\r\\n\\r\\n    //calculates the total variable debt locally using the scaled total supply instead\\r\\n    //of totalSupply(), as it's noticeably cheaper. Also, the index has been\\r\\n    //updated by the previous updateState() call\\r\\n    vars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress)\\r\\n      .scaledTotalSupply()\\r\\n      .rayMul(reserve.variableBorrowIndex);\\r\\n\\r\\n    (\\r\\n      vars.newLiquidityRate,\\r\\n      vars.newVariableRate\\r\\n    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\\r\\n      reserveAddress,\\r\\n      sFilTokenAddress,\\r\\n      liquidityAdded,\\r\\n      liquidityTaken,\\r\\n      vars.totalVariableDebt,\\r\\n      reserve.reserveFactor\\r\\n    );\\r\\n    require(vars.newLiquidityRate <= type(uint128).max, \\\"LIQUIDITY_RATE_OVERFLOW\\\");\\r\\n    require(vars.newVariableRate <= type(uint128).max, \\\"VARIABLE_BORROW_RATE_OVERFLOW\\\");\\r\\n\\r\\n    reserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\r\\n    reserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\r\\n\\r\\n    emit ReserveDataUpdated(\\r\\n      reserveAddress,\\r\\n      vars.newLiquidityRate,\\r\\n      vars.newVariableRate,\\r\\n      reserve.liquidityIndex,\\r\\n      reserve.variableBorrowIndex\\r\\n    );\\r\\n  }\\r\\n\\r\\n  struct MintToTreasuryLocalVars {\\r\\n    uint256 currentVariableDebt;\\r\\n    uint256 previousVariableDebt;\\r\\n    uint256 totalDebtAccrued;\\r\\n    uint256 amountToMint;\\r\\n    uint256 reserveFactor;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor\\r\\n   * @param reserve The reserve reserve to be updated\\r\\n   * @param scaledVariableDebt The current scaled total variable debt\\r\\n   * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\r\\n   * @param newLiquidityIndex The new liquidity index\\r\\n   * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\r\\n   **/\\r\\n  function _mintToTreasury(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 scaledVariableDebt,\\r\\n    uint256 previousVariableBorrowIndex,\\r\\n    uint256 newLiquidityIndex,\\r\\n    uint256 newVariableBorrowIndex\\r\\n  ) internal {\\r\\n    MintToTreasuryLocalVars memory vars;\\r\\n\\r\\n    vars.reserveFactor = reserve.reserveFactor;\\r\\n\\r\\n    if (vars.reserveFactor == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    //calculate the last principal variable debt\\r\\n    vars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\r\\n\\r\\n    //calculate the new total supply after accumulation of the index\\r\\n    vars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\r\\n\\r\\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\r\\n    vars.totalDebtAccrued = vars.currentVariableDebt.sub(vars.previousVariableDebt);\\r\\n\\r\\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\r\\n\\r\\n    if (vars.amountToMint != 0) {\\r\\n      ISFilToken(reserve.sFilTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve indexes and the timestamp of the update\\r\\n   * @param reserve The reserve to be updated\\r\\n   * @param scaledVariableDebt The scaled variable debt\\r\\n   * @param liquidityIndex The last stored liquidity index\\r\\n   * @param variableBorrowIndex The last stored variable borrow index\\r\\n   **/\\r\\n  function _updateIndexes(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 scaledVariableDebt,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex,\\r\\n    uint40 timestamp\\r\\n  ) internal returns (uint256, uint256) {\\r\\n    uint256 currentLiquidityRate = reserve.currentLiquidityRate;\\r\\n\\r\\n    uint256 newLiquidityIndex = liquidityIndex;\\r\\n    uint256 newVariableBorrowIndex = variableBorrowIndex;\\r\\n\\r\\n    //only cumulating if there is any income being produced\\r\\n    if (currentLiquidityRate > 0) {\\r\\n      uint256 cumulatedLiquidityInterest =\\r\\n        MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\r\\n      newLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\r\\n      require(newLiquidityIndex <= type(uint128).max, \\\"LIQUIDITY_INDEX_OVERFLOW\\\");\\r\\n\\r\\n      reserve.liquidityIndex = uint128(newLiquidityIndex);\\r\\n\\r\\n      //as the liquidity rate might come only from stable rate loans, we need to ensure\\r\\n      //that there is actual variable debt before accumulating\\r\\n      if (scaledVariableDebt != 0) {\\r\\n        uint256 cumulatedVariableBorrowInterest =\\r\\n          MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp);\\r\\n        newVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\r\\n        require(\\r\\n          newVariableBorrowIndex <= type(uint128).max,\\r\\n          \\\"VARIABLE_BORROW_INDEX_OVERFLOW\\\"\\r\\n        );\\r\\n        reserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\r\\n    return (newLiquidityIndex, newVariableBorrowIndex);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2b831812d4edacc71e8b06e86e0297dc010d7d6228a28ecea77dd32657012f2f\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct ReserveData {\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        // fee percentage\\r\\n        uint16 reserveFactor; \\r\\n        // base point 10000\\r\\n        uint16 ltv;\\r\\n        uint16 liquidationThreshold;\\r\\n        //tokens addresses\\r\\n        address sFilTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbc3b0f7e784167a2139add05d4dedf7a3354a3ffa7fb20da2d8e9b5d076cb36e\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506136ac806100206000396000f3fe608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638e18d6481161011a578063c5ebeaec116100ad578063deb4476f1161007c578063deb4476f14610627578063df4f1f011461063a578063e30c39781461064d578063f2fde38b1461065e578063feb7bb571461067157600080fd5b8063c5ebeaec146104f2578063c7258ba614610505578063cd3293de14610518578063d5fc44bf1461061457600080fd5b8063b88a802f116100e9578063b88a802f14610495578063bf92857c1461049d578063bfe10928146104d0578063c3525c28146104e357600080fd5b80638e18d648146104545780638ea0b3781461046757806396c2614c1461047a578063acb708151461048257600080fd5b806357b095bb1161019257806375619ab51161016157806375619ab51461040157806379ba509714610414578063841e45611461041c5780638da5cb5b1461042f57600080fd5b806357b095bb146103c057806361f1ce63146103d35780636e553f65146103e6578063715018a6146103f957600080fd5b80632f865568116101ce5780632f86556814610372578063343576f5146103855780634a417a53146103a5578063552033c4146103ad57600080fd5b8062f714ce146101ff57806305bef05e146102255780630700037d1461033d5780630c5e9f731461035d575b600080fd5b61021261020d36600461314d565b610679565b6040519081526020015b60405180910390f35b6103306040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152506040805161016081018252609a546001600160801b038082168352600160801b9182900481166020840152609b548082169484019490945292049091166060820152609c5464ffffffffff8116608083015261ffff600160281b8204811660a0840152600160381b8204811660c0840152600160481b82041660e08301526001600160a01b03600160581b9091048116610100830152609d548116610120830152609e541661014082015290565b60405161021c9190613179565b61021261034b366004613270565b60a06020526000908152604090205481565b61037061036b36600461329d565b610803565b005b610370610380366004613270565b610c16565b610212610393366004613270565b609f6020526000908152604090205481565b610212610d8b565b6102126b033b2e3c9fd0803ce800000081565b6103706103ce36600461314d565b610ece565b6103706103e1366004613270565b611119565b6103706103f436600461314d565b61112d565b610370611234565b61037061040f366004613270565b611248565b610370611259565b61037061042a366004613270565b6112d0565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161021c565b60975461043c906001600160a01b031681565b610370610475366004613345565b611342565b610212611353565b61021261049036600461314d565b611364565b61037061173d565b6104b06104ab366004613270565b61189a565b60408051948552602085019390935291830152606082015260800161021c565b60995461043c906001600160a01b031681565b610212670de0b6b3a764000081565b610370610500366004613360565b6119f6565b610370610513366004613360565b611be1565b609a54609b54609c54609d54609e54610595946001600160801b0380821695600160801b9283900482169581831695939091049091169264ffffffffff82169261ffff600160281b8404811693600160381b8104821693600160481b8204909216926001600160a01b03600160581b90920482169290821691168b565b604080516001600160801b039c8d1681529a8c1660208c0152988b16988a019890985298909516606088015264ffffffffff909316608087015261ffff91821660a0870152811660c08601521660e08401526001600160a01b03908116610100840152928316610120830152919091166101408201526101600161021c565b60985461043c906001600160a01b031681565b610212610635366004613270565b611caf565b6103706106483660046133c5565b611cfd565b6065546001600160a01b031661043c565b61037061066c366004613270565b612082565b6102126120f3565b609c546040516370a0823160e01b8152336004820152600091600160581b90046001600160a01b031690829082906370a082319060240160206040518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190613439565b90506000818610156107125785610714565b815b9050610720609a6120ff565b60975461073c90609a906001600160a01b0316856000856121ce565b609a54604051636b81068560e11b81523360048201526001600160a01b038781166024830152604482018490526001600160801b0390921660648201529084169063d7020d0a90608401600060405180830381600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b50506040518381526001600160a01b03881692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a3925050505b92915050565b600054610100900460ff16158080156108235750600054600160ff909116105b8061083d5750303b15801561083d575060005460ff166001145b6108a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156108c8576000805461ff0019166101001790555b6001600160a01b038a1661091e5760405162461bcd60e51b815260206004820181905260248201527f66696c20746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161089c565b6001600160a01b0389166109745760405162461bcd60e51b815260206004820181905260248201527f53465420746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161089c565b6001600160a01b0387166109d45760405162461bcd60e51b815260206004820152602160248201527f7346696c20746f6b656e20616464726573732063616e6e6f74206265207a65726044820152606f60f81b606482015260840161089c565b6001600160a01b038616610a3c5760405162461bcd60e51b815260206004820152602960248201527f7661726961626c654465627420746f6b656e20616464726573732063616e6e6f60448201526874206265207a65726f60b81b606482015260840161089c565b6001600160a01b038516610aa65760405162461bcd60e51b815260206004820152602b60248201527f696e74657265737452617465537472617465677920616464726573732063616e60448201526a6e6f74206265207a65726f60a81b606482015260840161089c565b610aae612491565b610ab66124b8565b609780546001600160a01b03808d166001600160a01b03199283161790925560988054928c1692909116919091179055610aef886124e8565b609c8054609d80546001600160a01b038a81166001600160a01b031992831617909255609e80548a8416921691909117905561ffff858116600160481b026affff00000000000000000019888316600160381b02166affffffff0000000000000019928a16600160281b0266ffff000000000019948e16600160581b02949094167fff0000000000000000000000000000000000000000ffffffff0000ffffffffff909516949094179290921716919091171790557b033b2e3c9fd0803ce800000000000000033b2e3c9fd0803ce8000000609a558015610c0a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600080610c228361189a565b935050925050670de0b6b3a76400008110610c7f5760405162461bcd60e51b815260206004820152601d60248201527f4845414c54485f464143544f525f41424f56455f5448524553484f4c44000000604482015260640161089c565b6001600160a01b0383166000908152609f6020526040902054610ca28385611364565b5060985460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610cef57600080fd5b505af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190613452565b506001600160a01b0384166000818152609f602090815260408083209290925581513381529081018690529081018390527ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef9729060600160405180910390a250505050565b600080609a60030160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190613439565b609754609c546040516370a0823160e01b81526001600160a01b03600160581b909204821660048201529293506000929116906370a082319060240160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190613439565b90508115610ec457610eb5818361348a565b610ebf90836134a2565b610ec7565b60005b9250505090565b609854604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610f1757600080fd5b505afa158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190613439565b1015610f965760405162461bcd60e51b81526020600482015260166024820152750a68ca8be82a0a0a49eac8abe9c9ea8be8a9c9eaa8e960531b604482015260640161089c565b6098546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190613439565b10156110585760405162461bcd60e51b81526020600482015260166024820152750a68ca8be848298829c868abe9c9ea8be8a9c9eaa8e960531b604482015260640161089c565b611062609a6120ff565b609754609c5461108c91609a916001600160a01b0391821691600160581b909104166000806121ce565b6098546110a4906001600160a01b0316333085612551565b6001600160a01b0381166000908152609f6020526040812080548492906110cc90849061348a565b909155505060408051338152602081018490526001600160a01b038316917f4a11de2114caf219af6f0e61dd164f13fdec022651f707d5ffcd3bbc37e1f254910160405180910390a25050565b6111216125c2565b61112a8161261c565b50565b609c54600160581b90046001600160a01b031661114a609a6120ff565b60975461116690609a906001600160a01b0316838660006121ce565b60975461117e906001600160a01b0316338386612551565b609a54604051630ab714fb60e11b81526001600160a01b0383169163156e29f6916111b991869188916001600160801b0316906004016134c4565b600060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b505060408051338152602081018790526001600160a01b03861693507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6292500160405180910390a2505050565b61123c6125c2565b6112466000612685565b565b6112506125c2565b61112a816124e8565b60655433906001600160a01b031681146112c75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161089c565b61112a81612685565b6112d86125c2565b609c5460405163841e456160e01b81526001600160a01b038381166004830152600160581b9092049091169063841e456190602401600060405180830381600087803b15801561132757600080fd5b505af115801561133b573d6000803e3d6000fd5b5050505050565b61134a6125c2565b61112a8161269e565b600061135f609a61270b565b905090565b609d546040516370a0823160e01b81526001600160a01b03838116600483015260009283928392909116906370a082319060240160206040518083038186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e89190613439565b33600090815260a06020526040812054919250828710611408578261140a565b865b905060008183101561141c578261141e565b815b905061142a81836134ee565b609754604051636eb1769f60e11b815233600482015230602482015291965086916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b15801561147857600080fd5b505afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190613439565b10156114fe5760405162461bcd60e51b815260206004820152601860248201527f46494c5f414c4c4f57414e43455f4e4f545f454e4f5547480000000000000000604482015260640161089c565b6097546040516370a0823160e01b815233600482015286916001600160a01b0316906370a082319060240160206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190613439565b10156115c05760405162461bcd60e51b815260206004820152601660248201527508c9298be848298829c868abe9c9ea8be8a9c9eaa8e960531b604482015260640161089c565b6115ca609a6120ff565b609d54609a54604051637a94c56560e11b81526001600160a01b039092169163f5298aca91611611918b918791600160801b9091046001600160801b0316906004016134c4565b600060405180830381600087803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b5050609c546097546001600160a01b03600160581b9092048216935061166d9250609a9116838660006121ce565b851561169957609c54609754611699916001600160a01b03918216913391600160581b90041689612551565b33600090815260a06020526040812080548492906116b89084906134ee565b9091555050609c546097546116e2916001600160a01b0391821691600160581b909104168461275a565b60408051848152602081018490529081018790526001600160a01b0389169033907fd6a068ae75f1025380f00b7a1476f705bae3c3644640cf62b857f8d02ace826e9060600160405180910390a35090979650505050505050565b336000908152609f60205260409020541561179a5760405162461bcd60e51b815260206004820152601b60248201527f4d5553545f554e504c4547455f414c4c5f434f4c4c41544552414c0000000000604482015260640161089c565b33600090815260a06020526040908190205460975491516370a0823160e01b8152306004820152909182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156117f257600080fd5b505afa158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182a9190613439565b101561183557600080fd5b33600081815260a0602052604081205560975461185e916001600160a01b03909116908361275a565b60408051338152602081018390527fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e910160405180910390a150565b6001600160a01b038181166000818152609f602052604080822054609d5491516370a0823160e01b815260048101949094529391928392839216906370a082319060240160206040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192e9190613439565b609c54604051631a6d1d7b60e01b81526004810187905260248101839052600160381b90910461ffff16604482015290935073F2d02e288Bb28D7dbB3FbBb2a4876199A98A06d190631a6d1d7b9060640160206040518083038186803b15801561199757600080fd5b505af41580156119ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cf9190613439565b609c549092506119ed9085908590600160481b900461ffff1661278f565b90509193509193565b6000611a013361189a565b509250505081811015611a565760405162461bcd60e51b815260206004820152601c60248201527f415641494c41424c455f424f52524f57535f4e4f545f454e4f55474800000000604482015260640161089c565b611a60609a6120ff565b609d54609a54604051630ab714fb60e11b81526001600160a01b039092169163156e29f691611aa79133918791600160801b9091046001600160801b0316906004016134c4565b600060405180830381600087803b158015611ac157600080fd5b505af1158015611ad5573d6000803e3d6000fd5b5050609754609c54611b039350609a92506001600160a01b0391821691600160581b909104166000866121ce565b609c54604051634efecaa560e01b815233600482015260248101849052600160581b9091046001600160a01b031690634efecaa590604401602060405180830381600087803b158015611b5557600080fd5b505af1158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d9190613439565b50609b546040517fe1979fe4c35e0cef342fef5668e2c8e7a7e9f5d5d1ca8fee0ac6c427fa4153af91611bd59133918691600160801b9091046001600160801b0316906134c4565b60405180910390a15050565b6000611bec33611caf565b9050600081831015611bfe5782611c00565b815b9050611c0c609a6120ff565b609754609c54611c3691609a916001600160a01b0391821691600160581b909104166000806121ce565b336000908152609f602052604081208054839290611c559084906134ee565b9091555050609854611c71906001600160a01b0316338361275a565b60408051338152602081018390527f0cdb7e259318c69f16c8770399e09f5531befac5033bf7c447e3bc2961169295910160405180910390a1505050565b6000806000611cbd8461189a565b50509150915080600014611cf357609c54611ce4908290600160381b900461ffff166127bd565b611cee90836134ee565b611cf5565b815b949350505050565b6099546001600160a01b03163314611d575760405162461bcd60e51b815260206004820152601960248201527f4f4e4c595f4449535452494255544f525f43414e5f43414c4c00000000000000604482015260640161089c565b838214611d985760405162461bcd60e51b815260206004820152600f60248201526e494e434f52524543545f504152414d60881b604482015260640161089c565b609754604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613439565b1015611e675760405162461bcd60e51b815260206004820152601c60248201527f46494c5f544f4b454e5f415050524f56455f4e4f545f454e4f55474800000000604482015260640161089c565b6097546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611eaa57600080fd5b505afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee29190613439565b1015611f305760405162461bcd60e51b815260206004820152601c60248201527f46494c5f544f4b454e5f42414c414e43455f4e4f545f454e4f55474800000000604482015260640161089c565b60005b8481101561206957838382818110611f4d57611f4d613505565b9050602002013560a06000888885818110611f6a57611f6a613505565b9050602002016020810190611f7f9190613270565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611fae919061348a565b90915550506099547f2e379e1e638f7b6d5ab413f9073818455805462de4aa4e33798c9ed1ac7afd91906001600160a01b0316878784818110611ff357611ff3613505565b90506020020160208101906120089190613270565b86868581811061201a5761201a613505565b9050602002013560405161204f939291906001600160a01b039384168152919092166020820152604081019190915260600190565b60405180910390a1806120618161351b565b915050611f33565b5060975461133b906001600160a01b0316333084612551565b61208a6125c2565b606580546001600160a01b0383166001600160a01b031990911681179091556120bb6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600061135f609a61286d565b60038101546040805163b1bf962d60e01b815290516000926001600160a01b03169163b1bf962d916004808301926020929190829003018186803b15801561214657600080fd5b505afa15801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e9190613439565b825460028401549192506001600160801b03600160801b820481169291169064ffffffffff166000806121b487878688876128cc565b915091506121c58787878585612a49565b50505050505050565b6121f96040518060800160405280600081526020016000815260200160008152602001600081525090565b855460038701546040805163b1bf962d60e01b8152905161229293600160801b90046001600160801b0316926001600160a01b03169163b1bf962d916004808301926020929190829003018186803b15801561225457600080fd5b505afa158015612268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228c9190613439565b90612b60565b6060820181905260048781015460028901546040516340e464b960e11b81526001600160a01b038a811694820194909452888416602482015260448101889052606481018790526084810194909452600160281b900461ffff1660a484015216906381c8c9729060c401604080518083038186803b15801561231357600080fd5b505afa158015612327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234b9190613536565b6040830152602082018190526001600160801b0310156123ad5760405162461bcd60e51b815260206004820152601760248201527f4c49515549444954595f524154455f4f564552464c4f57000000000000000000604482015260640161089c565b60408101516001600160801b0310156124085760405162461bcd60e51b815260206004820152601d60248201527f5641524941424c455f424f52524f575f524154455f4f564552464c4f57000000604482015260640161089c565b6020818101516040808401516001600160801b03808416600160801b82841681029190911760018d01558b54845195865295850192909252848116848401529304909216606082015290516001600160a01b038716917f4063a2df84b66bb796eb32622851d833e57b2c4292900c18f963af8808b13e35919081900360800190a2505050505050565b600054610100900460ff166112465760405162461bcd60e51b815260040161089c9061355a565b600054610100900460ff166124df5760405162461bcd60e51b815260040161089c9061355a565b61124633612685565b609954604080516001600160a01b03928316815291831660208301527f128323376dda10f736641415ad0e5e8a534e184b01a83f1d15af57c4627480d8910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526125bc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bfd565b50505050565b6033546001600160a01b031633146112465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161089c565b609e54604080516001600160a01b03928316815291831660208301527f8ae2fc9d7793180dcc54372828b79d8d347e11a6204bddba90ffe2fefbf3a45b910160405180910390a1609e80546001600160a01b0319166001600160a01b0392909216919091179055565b606580546001600160a01b031916905561112a81612cd2565b609c5460408051600160281b90920461ffff9081168352831660208301527f31caec7450620a660d4a01ee15dfa9b50473f532bbca695e0264110405656f69910160405180910390a1609c805461ffff909216600160281b0266ffff000000000019909216919091179055565b600281015460009064ffffffffff908116904216811415612735575050546001600160801b031690565b82546001840154600091611cf5916001600160801b039182169161228c911685612d24565b6040516001600160a01b03831660248201526044810182905261278a90849063a9059cbb60e01b90606401612585565b505050565b60008261279f57506000196127b6565b6127b3836127ad8685612d69565b90612dd4565b90505b9392505050565b6000816128045760405162461bcd60e51b81526020600482015260156024820152744d4154485f4449564953494f4e5f42595f5a45524f60581b604482015260640161089c565b60006128116002846134a2565b9050612710612822826000196134ee565b61282c91906134a2565b84111561284b5760405162461bcd60e51b815260040161089c906135a5565b8281612859612710876135dc565b612863919061348a565b611cf591906134a2565b600281015460009064ffffffffff90811690421681141561289e57505054600160801b90046001600160801b031690565b82546001840154600091611cf5916001600160801b03600160801b9283900481169261228c92041685612e77565b600185015460009081906001600160801b031685858215612a235760006128f38488612d24565b90506128ff818a612b60565b92506001600160801b038311156129585760405162461bcd60e51b815260206004820152601860248201527f4c49515549444954595f494e4445585f4f564552464c4f570000000000000000604482015260640161089c565b8a546fffffffffffffffffffffffffffffffff19166001600160801b038416178b558915612a215760018b01546000906129a290600160801b90046001600160801b031689612e77565b90506129ae818a612b60565b92506001600160801b03831115612a075760405162461bcd60e51b815260206004820152601e60248201527f5641524941424c455f424f52524f575f494e4445585f4f564552464c4f570000604482015260640161089c565b508a546001600160801b03808416600160801b029116178b555b505b600299909901805464ffffffffff19164264ffffffffff16179055989650505050505050565b612a7b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6002860154600160281b900461ffff1660808201819052612a9c575061133b565b612aa68585612b60565b6020820152612ab58583612b60565b8082526020820151612ac79190612e84565b604082018190526080820151612add9190612d69565b6060820181905215612b585760028601546060820151604051637df5bd3b60e01b8152600481019190915260248101859052600160581b9091046001600160a01b031690637df5bd3b90604401600060405180830381600087803b158015612b4457600080fd5b505af1158015610c0a573d6000803e3d6000fd5b505050505050565b6000821580612b6d575081155b15612b7a575060006107fd565b81612b9260026b033b2e3c9fd0803ce80000006134a2565b612b9e906000196134ee565b612ba891906134a2565b831115612bc75760405162461bcd60e51b815260040161089c906135a5565b6b033b2e3c9fd0803ce8000000612bdf6002826134a2565b612be984866135dc565b612bf3919061348a565b6127b691906134a2565b6000612c52826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e909092919063ffffffff16565b9050805160001480612c73575080806020019051810190612c739190613452565b61278a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612d384264ffffffffff8516612e84565b9050611cf56b033b2e3c9fd0803ce80000006301e13380612d598785612e9f565b612d6391906134a2565b90612eab565b6000821580612d76575081155b15612d83575060006107fd565b81612d9160026127106134a2565b612d9d906000196134ee565b612da791906134a2565b831115612dc65760405162461bcd60e51b815260040161089c906135a5565b612710612bdf6002826134a2565b600081612e165760405162461bcd60e51b815260206004820152601060248201526f4449564953494f4e5f42595f5a45524f60801b604482015260640161089c565b6000612e236002846134a2565b9050670de0b6b3a7640000612e3a826000196134ee565b612e4491906134a2565b841115612e635760405162461bcd60e51b815260040161089c906135a5565b8281612859670de0b6b3a7640000876135dc565b60006127b6838342612eb7565b60006127b682846134ee565b60606127b38484600085612fbb565b60006127b682846135dc565b60006127b6828461348a565b600080612ecb8364ffffffffff8616612e84565b905080612ee7576b033b2e3c9fd0803ce80000009150506127b6565b6000612ef46001836134ee565b9050600060028311612f07576000612f12565b612f126002846134ee565b90506000612f246301e13380896134a2565b90506000612f328280612b60565b90506000612f408284612b60565b905060006002612f5a84612f548a8a612e9f565b90612e9f565b612f6491906134a2565b905060006006612f7a84612f5489818d8d612e9f565b612f8491906134a2565b9050612fab81612d638481612f998a8e612e9f565b6b033b2e3c9fd0803ce8000000612d63565b9c9b505050505050505050505050565b60608247101561301c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089c565b600080866001600160a01b031685876040516130389190613627565b60006040518083038185875af1925050503d8060008114613075576040519150601f19603f3d011682016040523d82523d6000602084013e61307a565b606091505b509150915061308b87838387613096565b979650505050505050565b606083156131025782516130fb576001600160a01b0385163b6130fb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089c565b5081611cf5565b611cf583838151156131175781518083602001fd5b8060405162461bcd60e51b815260040161089c9190613643565b80356001600160a01b038116811461314857600080fd5b919050565b6000806040838503121561316057600080fd5b8235915061317060208401613131565b90509250929050565b81516001600160801b03168152610160810160208301516131a560208401826001600160801b03169052565b5060408301516131c060408401826001600160801b03169052565b5060608301516131db60608401826001600160801b03169052565b5060808301516131f4608084018264ffffffffff169052565b5060a083015161320a60a084018261ffff169052565b5060c083015161322060c084018261ffff169052565b5060e083015161323660e084018261ffff169052565b50610100838101516001600160a01b0390811691840191909152610120808501518216908401526101409384015116929091019190915290565b60006020828403121561328257600080fd5b6127b682613131565b803561ffff8116811461314857600080fd5b60008060008060008060008060006101208a8c0312156132bc57600080fd5b6132c58a613131565b98506132d360208b01613131565b97506132e160408b01613131565b96506132ef60608b01613131565b95506132fd60808b01613131565b945061330b60a08b01613131565b935061331960c08b0161328b565b925061332760e08b0161328b565b91506133366101008b0161328b565b90509295985092959850929598565b60006020828403121561335757600080fd5b6127b68261328b565b60006020828403121561337257600080fd5b5035919050565b60008083601f84011261338b57600080fd5b50813567ffffffffffffffff8111156133a357600080fd5b6020830191508360208260051b85010111156133be57600080fd5b9250929050565b6000806000806000606086880312156133dd57600080fd5b853567ffffffffffffffff808211156133f557600080fd5b61340189838a01613379565b9097509550602088013591508082111561341a57600080fd5b5061342788828901613379565b96999598509660400135949350505050565b60006020828403121561344b57600080fd5b5051919050565b60006020828403121561346457600080fd5b815180151581146127b657600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561349d5761349d613474565b500190565b6000826134bf57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0393909316835260208301919091526001600160801b0316604082015260600190565b60008282101561350057613500613474565b500390565b634e487b7160e01b600052603260045260246000fd5b600060001982141561352f5761352f613474565b5060010190565b6000806040838503121561354957600080fd5b505080516020909101519092909150565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526017908201527f4d554c5449504c49434154494f4e5f4f564552464c4f57000000000000000000604082015260600190565b60008160001904831182151516156135f6576135f6613474565b500290565b60005b838110156136165781810151838201526020016135fe565b838111156125bc5750506000910152565b600082516136398184602087016135fb565b9190910192915050565b60208152600082518060208401526136628160408501602087016135fb565b601f01601f1916919091016040019291505056fea2646970667358221220bdf80c042496cb988ab480d1dbbf92d0ecfd66ae1fb1a7a289e677db9c6994d864736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101fa5760003560e01c80638e18d6481161011a578063c5ebeaec116100ad578063deb4476f1161007c578063deb4476f14610627578063df4f1f011461063a578063e30c39781461064d578063f2fde38b1461065e578063feb7bb571461067157600080fd5b8063c5ebeaec146104f2578063c7258ba614610505578063cd3293de14610518578063d5fc44bf1461061457600080fd5b8063b88a802f116100e9578063b88a802f14610495578063bf92857c1461049d578063bfe10928146104d0578063c3525c28146104e357600080fd5b80638e18d648146104545780638ea0b3781461046757806396c2614c1461047a578063acb708151461048257600080fd5b806357b095bb1161019257806375619ab51161016157806375619ab51461040157806379ba509714610414578063841e45611461041c5780638da5cb5b1461042f57600080fd5b806357b095bb146103c057806361f1ce63146103d35780636e553f65146103e6578063715018a6146103f957600080fd5b80632f865568116101ce5780632f86556814610372578063343576f5146103855780634a417a53146103a5578063552033c4146103ad57600080fd5b8062f714ce146101ff57806305bef05e146102255780630700037d1461033d5780630c5e9f731461035d575b600080fd5b61021261020d36600461314d565b610679565b6040519081526020015b60405180910390f35b6103306040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101829052610140810191909152506040805161016081018252609a546001600160801b038082168352600160801b9182900481166020840152609b548082169484019490945292049091166060820152609c5464ffffffffff8116608083015261ffff600160281b8204811660a0840152600160381b8204811660c0840152600160481b82041660e08301526001600160a01b03600160581b9091048116610100830152609d548116610120830152609e541661014082015290565b60405161021c9190613179565b61021261034b366004613270565b60a06020526000908152604090205481565b61037061036b36600461329d565b610803565b005b610370610380366004613270565b610c16565b610212610393366004613270565b609f6020526000908152604090205481565b610212610d8b565b6102126b033b2e3c9fd0803ce800000081565b6103706103ce36600461314d565b610ece565b6103706103e1366004613270565b611119565b6103706103f436600461314d565b61112d565b610370611234565b61037061040f366004613270565b611248565b610370611259565b61037061042a366004613270565b6112d0565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161021c565b60975461043c906001600160a01b031681565b610370610475366004613345565b611342565b610212611353565b61021261049036600461314d565b611364565b61037061173d565b6104b06104ab366004613270565b61189a565b60408051948552602085019390935291830152606082015260800161021c565b60995461043c906001600160a01b031681565b610212670de0b6b3a764000081565b610370610500366004613360565b6119f6565b610370610513366004613360565b611be1565b609a54609b54609c54609d54609e54610595946001600160801b0380821695600160801b9283900482169581831695939091049091169264ffffffffff82169261ffff600160281b8404811693600160381b8104821693600160481b8204909216926001600160a01b03600160581b90920482169290821691168b565b604080516001600160801b039c8d1681529a8c1660208c0152988b16988a019890985298909516606088015264ffffffffff909316608087015261ffff91821660a0870152811660c08601521660e08401526001600160a01b03908116610100840152928316610120830152919091166101408201526101600161021c565b60985461043c906001600160a01b031681565b610212610635366004613270565b611caf565b6103706106483660046133c5565b611cfd565b6065546001600160a01b031661043c565b61037061066c366004613270565b612082565b6102126120f3565b609c546040516370a0823160e01b8152336004820152600091600160581b90046001600160a01b031690829082906370a082319060240160206040518083038186803b1580156106c857600080fd5b505afa1580156106dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107009190613439565b90506000818610156107125785610714565b815b9050610720609a6120ff565b60975461073c90609a906001600160a01b0316856000856121ce565b609a54604051636b81068560e11b81523360048201526001600160a01b038781166024830152604482018490526001600160801b0390921660648201529084169063d7020d0a90608401600060405180830381600087803b1580156107a057600080fd5b505af11580156107b4573d6000803e3d6000fd5b50506040518381526001600160a01b03881692503391507f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb9060200160405180910390a3925050505b92915050565b600054610100900460ff16158080156108235750600054600160ff909116105b8061083d5750303b15801561083d575060005460ff166001145b6108a55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156108c8576000805461ff0019166101001790555b6001600160a01b038a1661091e5760405162461bcd60e51b815260206004820181905260248201527f66696c20746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161089c565b6001600160a01b0389166109745760405162461bcd60e51b815260206004820181905260248201527f53465420746f6b656e20616464726573732063616e6e6f74206265207a65726f604482015260640161089c565b6001600160a01b0387166109d45760405162461bcd60e51b815260206004820152602160248201527f7346696c20746f6b656e20616464726573732063616e6e6f74206265207a65726044820152606f60f81b606482015260840161089c565b6001600160a01b038616610a3c5760405162461bcd60e51b815260206004820152602960248201527f7661726961626c654465627420746f6b656e20616464726573732063616e6e6f60448201526874206265207a65726f60b81b606482015260840161089c565b6001600160a01b038516610aa65760405162461bcd60e51b815260206004820152602b60248201527f696e74657265737452617465537472617465677920616464726573732063616e60448201526a6e6f74206265207a65726f60a81b606482015260840161089c565b610aae612491565b610ab66124b8565b609780546001600160a01b03808d166001600160a01b03199283161790925560988054928c1692909116919091179055610aef886124e8565b609c8054609d80546001600160a01b038a81166001600160a01b031992831617909255609e80548a8416921691909117905561ffff858116600160481b026affff00000000000000000019888316600160381b02166affffffff0000000000000019928a16600160281b0266ffff000000000019948e16600160581b02949094167fff0000000000000000000000000000000000000000ffffffff0000ffffffffff909516949094179290921716919091171790557b033b2e3c9fd0803ce800000000000000033b2e3c9fd0803ce8000000609a558015610c0a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050565b600080610c228361189a565b935050925050670de0b6b3a76400008110610c7f5760405162461bcd60e51b815260206004820152601d60248201527f4845414c54485f464143544f525f41424f56455f5448524553484f4c44000000604482015260640161089c565b6001600160a01b0383166000908152609f6020526040902054610ca28385611364565b5060985460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610cef57600080fd5b505af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190613452565b506001600160a01b0384166000818152609f602090815260408083209290925581513381529081018690529081018390527ff3fa0eaee8f258c23b013654df25d1527f98a5c7ccd5e951dd77caca400ef9729060600160405180910390a250505050565b600080609a60030160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddf57600080fd5b505afa158015610df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e179190613439565b609754609c546040516370a0823160e01b81526001600160a01b03600160581b909204821660048201529293506000929116906370a082319060240160206040518083038186803b158015610e6b57600080fd5b505afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190613439565b90508115610ec457610eb5818361348a565b610ebf90836134a2565b610ec7565b60005b9250505090565b609854604051636eb1769f60e11b815233600482015230602482015283916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015610f1757600080fd5b505afa158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190613439565b1015610f965760405162461bcd60e51b81526020600482015260166024820152750a68ca8be82a0a0a49eac8abe9c9ea8be8a9c9eaa8e960531b604482015260640161089c565b6098546040516370a0823160e01b815233600482015283916001600160a01b0316906370a082319060240160206040518083038186803b158015610fd957600080fd5b505afa158015610fed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110119190613439565b10156110585760405162461bcd60e51b81526020600482015260166024820152750a68ca8be848298829c868abe9c9ea8be8a9c9eaa8e960531b604482015260640161089c565b611062609a6120ff565b609754609c5461108c91609a916001600160a01b0391821691600160581b909104166000806121ce565b6098546110a4906001600160a01b0316333085612551565b6001600160a01b0381166000908152609f6020526040812080548492906110cc90849061348a565b909155505060408051338152602081018490526001600160a01b038316917f4a11de2114caf219af6f0e61dd164f13fdec022651f707d5ffcd3bbc37e1f254910160405180910390a25050565b6111216125c2565b61112a8161261c565b50565b609c54600160581b90046001600160a01b031661114a609a6120ff565b60975461116690609a906001600160a01b0316838660006121ce565b60975461117e906001600160a01b0316338386612551565b609a54604051630ab714fb60e11b81526001600160a01b0383169163156e29f6916111b991869188916001600160801b0316906004016134c4565b600060405180830381600087803b1580156111d357600080fd5b505af11580156111e7573d6000803e3d6000fd5b505060408051338152602081018790526001600160a01b03861693507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6292500160405180910390a2505050565b61123c6125c2565b6112466000612685565b565b6112506125c2565b61112a816124e8565b60655433906001600160a01b031681146112c75760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b606482015260840161089c565b61112a81612685565b6112d86125c2565b609c5460405163841e456160e01b81526001600160a01b038381166004830152600160581b9092049091169063841e456190602401600060405180830381600087803b15801561132757600080fd5b505af115801561133b573d6000803e3d6000fd5b5050505050565b61134a6125c2565b61112a8161269e565b600061135f609a61270b565b905090565b609d546040516370a0823160e01b81526001600160a01b03838116600483015260009283928392909116906370a082319060240160206040518083038186803b1580156113b057600080fd5b505afa1580156113c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e89190613439565b33600090815260a06020526040812054919250828710611408578261140a565b865b905060008183101561141c578261141e565b815b905061142a81836134ee565b609754604051636eb1769f60e11b815233600482015230602482015291965086916001600160a01b039091169063dd62ed3e9060440160206040518083038186803b15801561147857600080fd5b505afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190613439565b10156114fe5760405162461bcd60e51b815260206004820152601860248201527f46494c5f414c4c4f57414e43455f4e4f545f454e4f5547480000000000000000604482015260640161089c565b6097546040516370a0823160e01b815233600482015286916001600160a01b0316906370a082319060240160206040518083038186803b15801561154157600080fd5b505afa158015611555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115799190613439565b10156115c05760405162461bcd60e51b815260206004820152601660248201527508c9298be848298829c868abe9c9ea8be8a9c9eaa8e960531b604482015260640161089c565b6115ca609a6120ff565b609d54609a54604051637a94c56560e11b81526001600160a01b039092169163f5298aca91611611918b918791600160801b9091046001600160801b0316906004016134c4565b600060405180830381600087803b15801561162b57600080fd5b505af115801561163f573d6000803e3d6000fd5b5050609c546097546001600160a01b03600160581b9092048216935061166d9250609a9116838660006121ce565b851561169957609c54609754611699916001600160a01b03918216913391600160581b90041689612551565b33600090815260a06020526040812080548492906116b89084906134ee565b9091555050609c546097546116e2916001600160a01b0391821691600160581b909104168461275a565b60408051848152602081018490529081018790526001600160a01b0389169033907fd6a068ae75f1025380f00b7a1476f705bae3c3644640cf62b857f8d02ace826e9060600160405180910390a35090979650505050505050565b336000908152609f60205260409020541561179a5760405162461bcd60e51b815260206004820152601b60248201527f4d5553545f554e504c4547455f414c4c5f434f4c4c41544552414c0000000000604482015260640161089c565b33600090815260a06020526040908190205460975491516370a0823160e01b8152306004820152909182916001600160a01b03909116906370a082319060240160206040518083038186803b1580156117f257600080fd5b505afa158015611806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182a9190613439565b101561183557600080fd5b33600081815260a0602052604081205560975461185e916001600160a01b03909116908361275a565b60408051338152602081018390527fba8de60c3403ec381d1d484652ea1980e3c3e56359195c92525bff4ce47ad98e910160405180910390a150565b6001600160a01b038181166000818152609f602052604080822054609d5491516370a0823160e01b815260048101949094529391928392839216906370a082319060240160206040518083038186803b1580156118f657600080fd5b505afa15801561190a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192e9190613439565b609c54604051631a6d1d7b60e01b81526004810187905260248101839052600160381b90910461ffff16604482015290935073__$25820e62b32c1fe3d9c4cb73717c9c94ef$__90631a6d1d7b9060640160206040518083038186803b15801561199757600080fd5b505af41580156119ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cf9190613439565b609c549092506119ed9085908590600160481b900461ffff1661278f565b90509193509193565b6000611a013361189a565b509250505081811015611a565760405162461bcd60e51b815260206004820152601c60248201527f415641494c41424c455f424f52524f57535f4e4f545f454e4f55474800000000604482015260640161089c565b611a60609a6120ff565b609d54609a54604051630ab714fb60e11b81526001600160a01b039092169163156e29f691611aa79133918791600160801b9091046001600160801b0316906004016134c4565b600060405180830381600087803b158015611ac157600080fd5b505af1158015611ad5573d6000803e3d6000fd5b5050609754609c54611b039350609a92506001600160a01b0391821691600160581b909104166000866121ce565b609c54604051634efecaa560e01b815233600482015260248101849052600160581b9091046001600160a01b031690634efecaa590604401602060405180830381600087803b158015611b5557600080fd5b505af1158015611b69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b8d9190613439565b50609b546040517fe1979fe4c35e0cef342fef5668e2c8e7a7e9f5d5d1ca8fee0ac6c427fa4153af91611bd59133918691600160801b9091046001600160801b0316906134c4565b60405180910390a15050565b6000611bec33611caf565b9050600081831015611bfe5782611c00565b815b9050611c0c609a6120ff565b609754609c54611c3691609a916001600160a01b0391821691600160581b909104166000806121ce565b336000908152609f602052604081208054839290611c559084906134ee565b9091555050609854611c71906001600160a01b0316338361275a565b60408051338152602081018390527f0cdb7e259318c69f16c8770399e09f5531befac5033bf7c447e3bc2961169295910160405180910390a1505050565b6000806000611cbd8461189a565b50509150915080600014611cf357609c54611ce4908290600160381b900461ffff166127bd565b611cee90836134ee565b611cf5565b815b949350505050565b6099546001600160a01b03163314611d575760405162461bcd60e51b815260206004820152601960248201527f4f4e4c595f4449535452494255544f525f43414e5f43414c4c00000000000000604482015260640161089c565b838214611d985760405162461bcd60e51b815260206004820152600f60248201526e494e434f52524543545f504152414d60881b604482015260640161089c565b609754604051636eb1769f60e11b815233600482015230602482015282916001600160a01b03169063dd62ed3e9060440160206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613439565b1015611e675760405162461bcd60e51b815260206004820152601c60248201527f46494c5f544f4b454e5f415050524f56455f4e4f545f454e4f55474800000000604482015260640161089c565b6097546040516370a0823160e01b815233600482015282916001600160a01b0316906370a082319060240160206040518083038186803b158015611eaa57600080fd5b505afa158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee29190613439565b1015611f305760405162461bcd60e51b815260206004820152601c60248201527f46494c5f544f4b454e5f42414c414e43455f4e4f545f454e4f55474800000000604482015260640161089c565b60005b8481101561206957838382818110611f4d57611f4d613505565b9050602002013560a06000888885818110611f6a57611f6a613505565b9050602002016020810190611f7f9190613270565b6001600160a01b03166001600160a01b031681526020019081526020016000206000828254611fae919061348a565b90915550506099547f2e379e1e638f7b6d5ab413f9073818455805462de4aa4e33798c9ed1ac7afd91906001600160a01b0316878784818110611ff357611ff3613505565b90506020020160208101906120089190613270565b86868581811061201a5761201a613505565b9050602002013560405161204f939291906001600160a01b039384168152919092166020820152604081019190915260600190565b60405180910390a1806120618161351b565b915050611f33565b5060975461133b906001600160a01b0316333084612551565b61208a6125c2565b606580546001600160a01b0383166001600160a01b031990911681179091556120bb6033546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b600061135f609a61286d565b60038101546040805163b1bf962d60e01b815290516000926001600160a01b03169163b1bf962d916004808301926020929190829003018186803b15801561214657600080fd5b505afa15801561215a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217e9190613439565b825460028401549192506001600160801b03600160801b820481169291169064ffffffffff166000806121b487878688876128cc565b915091506121c58787878585612a49565b50505050505050565b6121f96040518060800160405280600081526020016000815260200160008152602001600081525090565b855460038701546040805163b1bf962d60e01b8152905161229293600160801b90046001600160801b0316926001600160a01b03169163b1bf962d916004808301926020929190829003018186803b15801561225457600080fd5b505afa158015612268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228c9190613439565b90612b60565b6060820181905260048781015460028901546040516340e464b960e11b81526001600160a01b038a811694820194909452888416602482015260448101889052606481018790526084810194909452600160281b900461ffff1660a484015216906381c8c9729060c401604080518083038186803b15801561231357600080fd5b505afa158015612327573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234b9190613536565b6040830152602082018190526001600160801b0310156123ad5760405162461bcd60e51b815260206004820152601760248201527f4c49515549444954595f524154455f4f564552464c4f57000000000000000000604482015260640161089c565b60408101516001600160801b0310156124085760405162461bcd60e51b815260206004820152601d60248201527f5641524941424c455f424f52524f575f524154455f4f564552464c4f57000000604482015260640161089c565b6020818101516040808401516001600160801b03808416600160801b82841681029190911760018d01558b54845195865295850192909252848116848401529304909216606082015290516001600160a01b038716917f4063a2df84b66bb796eb32622851d833e57b2c4292900c18f963af8808b13e35919081900360800190a2505050505050565b600054610100900460ff166112465760405162461bcd60e51b815260040161089c9061355a565b600054610100900460ff166124df5760405162461bcd60e51b815260040161089c9061355a565b61124633612685565b609954604080516001600160a01b03928316815291831660208301527f128323376dda10f736641415ad0e5e8a534e184b01a83f1d15af57c4627480d8910160405180910390a1609980546001600160a01b0319166001600160a01b0392909216919091179055565b6040516001600160a01b03808516602483015283166044820152606481018290526125bc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612bfd565b50505050565b6033546001600160a01b031633146112465760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161089c565b609e54604080516001600160a01b03928316815291831660208301527f8ae2fc9d7793180dcc54372828b79d8d347e11a6204bddba90ffe2fefbf3a45b910160405180910390a1609e80546001600160a01b0319166001600160a01b0392909216919091179055565b606580546001600160a01b031916905561112a81612cd2565b609c5460408051600160281b90920461ffff9081168352831660208301527f31caec7450620a660d4a01ee15dfa9b50473f532bbca695e0264110405656f69910160405180910390a1609c805461ffff909216600160281b0266ffff000000000019909216919091179055565b600281015460009064ffffffffff908116904216811415612735575050546001600160801b031690565b82546001840154600091611cf5916001600160801b039182169161228c911685612d24565b6040516001600160a01b03831660248201526044810182905261278a90849063a9059cbb60e01b90606401612585565b505050565b60008261279f57506000196127b6565b6127b3836127ad8685612d69565b90612dd4565b90505b9392505050565b6000816128045760405162461bcd60e51b81526020600482015260156024820152744d4154485f4449564953494f4e5f42595f5a45524f60581b604482015260640161089c565b60006128116002846134a2565b9050612710612822826000196134ee565b61282c91906134a2565b84111561284b5760405162461bcd60e51b815260040161089c906135a5565b8281612859612710876135dc565b612863919061348a565b611cf591906134a2565b600281015460009064ffffffffff90811690421681141561289e57505054600160801b90046001600160801b031690565b82546001840154600091611cf5916001600160801b03600160801b9283900481169261228c92041685612e77565b600185015460009081906001600160801b031685858215612a235760006128f38488612d24565b90506128ff818a612b60565b92506001600160801b038311156129585760405162461bcd60e51b815260206004820152601860248201527f4c49515549444954595f494e4445585f4f564552464c4f570000000000000000604482015260640161089c565b8a546fffffffffffffffffffffffffffffffff19166001600160801b038416178b558915612a215760018b01546000906129a290600160801b90046001600160801b031689612e77565b90506129ae818a612b60565b92506001600160801b03831115612a075760405162461bcd60e51b815260206004820152601e60248201527f5641524941424c455f424f52524f575f494e4445585f4f564552464c4f570000604482015260640161089c565b508a546001600160801b03808416600160801b029116178b555b505b600299909901805464ffffffffff19164264ffffffffff16179055989650505050505050565b612a7b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b6002860154600160281b900461ffff1660808201819052612a9c575061133b565b612aa68585612b60565b6020820152612ab58583612b60565b8082526020820151612ac79190612e84565b604082018190526080820151612add9190612d69565b6060820181905215612b585760028601546060820151604051637df5bd3b60e01b8152600481019190915260248101859052600160581b9091046001600160a01b031690637df5bd3b90604401600060405180830381600087803b158015612b4457600080fd5b505af1158015610c0a573d6000803e3d6000fd5b505050505050565b6000821580612b6d575081155b15612b7a575060006107fd565b81612b9260026b033b2e3c9fd0803ce80000006134a2565b612b9e906000196134ee565b612ba891906134a2565b831115612bc75760405162461bcd60e51b815260040161089c906135a5565b6b033b2e3c9fd0803ce8000000612bdf6002826134a2565b612be984866135dc565b612bf3919061348a565b6127b691906134a2565b6000612c52826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612e909092919063ffffffff16565b9050805160001480612c73575080806020019051810190612c739190613452565b61278a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161089c565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080612d384264ffffffffff8516612e84565b9050611cf56b033b2e3c9fd0803ce80000006301e13380612d598785612e9f565b612d6391906134a2565b90612eab565b6000821580612d76575081155b15612d83575060006107fd565b81612d9160026127106134a2565b612d9d906000196134ee565b612da791906134a2565b831115612dc65760405162461bcd60e51b815260040161089c906135a5565b612710612bdf6002826134a2565b600081612e165760405162461bcd60e51b815260206004820152601060248201526f4449564953494f4e5f42595f5a45524f60801b604482015260640161089c565b6000612e236002846134a2565b9050670de0b6b3a7640000612e3a826000196134ee565b612e4491906134a2565b841115612e635760405162461bcd60e51b815260040161089c906135a5565b8281612859670de0b6b3a7640000876135dc565b60006127b6838342612eb7565b60006127b682846134ee565b60606127b38484600085612fbb565b60006127b682846135dc565b60006127b6828461348a565b600080612ecb8364ffffffffff8616612e84565b905080612ee7576b033b2e3c9fd0803ce80000009150506127b6565b6000612ef46001836134ee565b9050600060028311612f07576000612f12565b612f126002846134ee565b90506000612f246301e13380896134a2565b90506000612f328280612b60565b90506000612f408284612b60565b905060006002612f5a84612f548a8a612e9f565b90612e9f565b612f6491906134a2565b905060006006612f7a84612f5489818d8d612e9f565b612f8491906134a2565b9050612fab81612d638481612f998a8e612e9f565b6b033b2e3c9fd0803ce8000000612d63565b9c9b505050505050505050505050565b60608247101561301c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161089c565b600080866001600160a01b031685876040516130389190613627565b60006040518083038185875af1925050503d8060008114613075576040519150601f19603f3d011682016040523d82523d6000602084013e61307a565b606091505b509150915061308b87838387613096565b979650505050505050565b606083156131025782516130fb576001600160a01b0385163b6130fb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161089c565b5081611cf5565b611cf583838151156131175781518083602001fd5b8060405162461bcd60e51b815260040161089c9190613643565b80356001600160a01b038116811461314857600080fd5b919050565b6000806040838503121561316057600080fd5b8235915061317060208401613131565b90509250929050565b81516001600160801b03168152610160810160208301516131a560208401826001600160801b03169052565b5060408301516131c060408401826001600160801b03169052565b5060608301516131db60608401826001600160801b03169052565b5060808301516131f4608084018264ffffffffff169052565b5060a083015161320a60a084018261ffff169052565b5060c083015161322060c084018261ffff169052565b5060e083015161323660e084018261ffff169052565b50610100838101516001600160a01b0390811691840191909152610120808501518216908401526101409384015116929091019190915290565b60006020828403121561328257600080fd5b6127b682613131565b803561ffff8116811461314857600080fd5b60008060008060008060008060006101208a8c0312156132bc57600080fd5b6132c58a613131565b98506132d360208b01613131565b97506132e160408b01613131565b96506132ef60608b01613131565b95506132fd60808b01613131565b945061330b60a08b01613131565b935061331960c08b0161328b565b925061332760e08b0161328b565b91506133366101008b0161328b565b90509295985092959850929598565b60006020828403121561335757600080fd5b6127b68261328b565b60006020828403121561337257600080fd5b5035919050565b60008083601f84011261338b57600080fd5b50813567ffffffffffffffff8111156133a357600080fd5b6020830191508360208260051b85010111156133be57600080fd5b9250929050565b6000806000806000606086880312156133dd57600080fd5b853567ffffffffffffffff808211156133f557600080fd5b61340189838a01613379565b9097509550602088013591508082111561341a57600080fd5b5061342788828901613379565b96999598509660400135949350505050565b60006020828403121561344b57600080fd5b5051919050565b60006020828403121561346457600080fd5b815180151581146127b657600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561349d5761349d613474565b500190565b6000826134bf57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b0393909316835260208301919091526001600160801b0316604082015260600190565b60008282101561350057613500613474565b500390565b634e487b7160e01b600052603260045260246000fd5b600060001982141561352f5761352f613474565b5060010190565b6000806040838503121561354957600080fd5b505080516020909101519092909150565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526017908201527f4d554c5449504c49434154494f4e5f4f564552464c4f57000000000000000000604082015260600190565b60008160001904831182151516156135f6576135f6613474565b500290565b60005b838110156136165781810151838201526020016135fe565b838111156125bc5750506000910152565b600082516136398184602087016135fb565b9190910192915050565b60208152600082518060208401526136628160408501602087016135fb565b601f01601f1916919091016040019291505056fea2646970667358221220bdf80c042496cb988ab480d1dbbf92d0ecfd66ae1fb1a7a289e677db9c6994d864736f6c63430008090033",
  "libraries": {
    "RerserveLogic": "0x872f76C032f899976FC1C4De12E6A48fE3Cc02B8",
    "GenericLogic": "0xF2d02e288Bb28D7dbB3FbBb2a4876199A98A06d1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "borrow(uint256)": {
        "details": "Allows users to borrow a specific `amount` of FIL, provided that the borrower already deposited enough collateral",
        "params": {
          "amount": "The amount to be borrowed*"
        }
      },
      "deposit(uint256,address)": {
        "details": "Deposits an `amount` of FIL into the reserve, receiving equivalent sFIL in return.",
        "params": {
          "amount": "The amount to be deposited",
          "onBehalfOf": "The address that will receive the sFIL, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of sFIL   is a different wallet*"
        }
      },
      "getReserveNormalizedIncome()": {
        "details": "Returns the normalized income normalized income of the reserve",
        "returns": {
          "_0": "The reserve's normalized income"
        }
      },
      "getReserveNormalizedVariableDebt()": {
        "details": "Returns the normalized variable debt per unit of FIL",
        "returns": {
          "_0": "The reserve normalized variable debt"
        }
      },
      "liquidate(address)": {
        "details": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1",
        "params": {
          "user": "The address of the borrower getting liquidated to receive the underlying collateral asset directly*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "pledge(uint256,address)": {
        "details": "pledge an `amount` of SFT for borrowing FIL from the pool",
        "params": {
          "amount": "The amount of SFT",
          "onBehalfOf": "The address that will receive the SFT as collateral,same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary is a different wallet"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repay(uint256,address)": {
        "params": {
          "amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt",
          "onBehalfOf": "Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed"
        },
        "returns": {
          "_0": "The final amount repaid*"
        }
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      },
      "unpledge(uint256)": {
        "details": "unpledge an `amount` of SFT from the pool, can't cause totalDebt > totalCollateral * ltv",
        "params": {
          "amount": "The amount of SFT   - Send the value type(uint256).max in order to unpledge the max amount you can unpledge"
        }
      },
      "withdraw(uint256,address)": {
        "details": "Withdraws an `amount` of FIL from the reserve, burning the equivalent sFIL owned",
        "params": {
          "amount": "The FIL amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole sFIL balance",
          "to": "Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
        },
        "returns": {
          "_0": "The final amount withdrawn*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "repay(uint256,address)": {
        "notice": "Repays a borrowed `amount` of FIL, burning the equivalent debt tokens owned"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 244,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 247,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 777,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 116,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 236,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 25,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 104,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3213,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "filToken",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 3215,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "sftToken",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 3217,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "distributor",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 3220,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "reserve",
        "offset": 0,
        "slot": "154",
        "type": "t_struct(ReserveData)5048_storage"
      },
      {
        "astId": 3224,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "pledges",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3228,
        "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
        "label": "rewards",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ReserveData)5048_storage": {
        "encoding": "inplace",
        "label": "struct DataTypes.ReserveData",
        "members": [
          {
            "astId": 5027,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "liquidityIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 5029,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "variableBorrowIndex",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 5031,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "currentLiquidityRate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 5033,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "currentVariableBorrowRate",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 5035,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "lastUpdateTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 5037,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "reserveFactor",
            "offset": 5,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 5039,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "ltv",
            "offset": 7,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 5041,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "liquidationThreshold",
            "offset": 9,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 5043,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "sFilTokenAddress",
            "offset": 11,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 5045,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "variableDebtTokenAddress",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 5047,
            "contract": "contracts/lendingpool/LendingPool.sol:LendingPool",
            "label": "interestRateStrategyAddress",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}