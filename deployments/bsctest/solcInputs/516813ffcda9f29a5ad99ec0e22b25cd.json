{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\n     * 0 before setting it to a non-zero value.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "contracts/helper/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./WadRayMath.sol\";\r\n\r\nlibrary MathUtils {\r\n  using SafeMath for uint256;\r\n  using WadRayMath for uint256;\r\n\r\n  /// @dev Ignoring leap years\r\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\r\n\r\n  /**\r\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\r\n   * @param rate The interest rate, in ray\r\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\r\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\r\n   **/\r\n\r\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    //solium-disable-next-line\r\n    uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\r\n\r\n    return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\r\n  }\r\n\r\n  /**\r\n   * @dev Function to calculate the interest using a compounded interest rate formula\r\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\r\n   *\r\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\r\n   *\r\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\r\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\r\n   *\r\n   * @param rate The interest rate, in ray\r\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\r\n   * @return The interest rate compounded during the timeDelta, in ray\r\n   **/\r\n  function calculateCompoundedInterest(\r\n    uint256 rate,\r\n    uint40 lastUpdateTimestamp,\r\n    uint256 currentTimestamp\r\n  ) internal pure returns (uint256) {\r\n    //solium-disable-next-line\r\n    uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\r\n\r\n    if (exp == 0) {\r\n      return WadRayMath.ray();\r\n    }\r\n\r\n    uint256 expMinusOne = exp - 1;\r\n\r\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\r\n\r\n    uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\r\n\r\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\r\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\r\n\r\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\r\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\r\n\r\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\r\n   * @param rate The interest rate (in ray)\r\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\r\n   **/\r\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\r\n  }\r\n}\r\n"
    },
    "contracts/helper/PercentageMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title PercentageMath library\r\n * @notice Provides functions to perform percentage calculations\r\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\r\n * @dev Operations are rounded half up\r\n **/\r\n\r\nlibrary PercentageMath {\r\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\r\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\r\n\r\n  /**\r\n   * @dev Executes a percentage multiplication\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return The percentage of value\r\n   **/\r\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n    if (value == 0 || percentage == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(\r\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\r\n      \"MULTIPLICATION_OVERFLOW\"\r\n    );\r\n\r\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\r\n  }\r\n\r\n  /**\r\n   * @dev Executes a percentage division\r\n   * @param value The value of which the percentage needs to be calculated\r\n   * @param percentage The percentage of the value to be calculated\r\n   * @return The value divided the percentage\r\n   **/\r\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\r\n    require(percentage != 0, \"MATH_DIVISION_BY_ZERO\");\r\n    uint256 halfPercentage = percentage / 2;\r\n\r\n    require(\r\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\r\n      \"MULTIPLICATION_OVERFLOW\"\r\n    );\r\n\r\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\r\n  }\r\n}\r\n"
    },
    "contracts/helper/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\n/**\r\n * @title WadRayMath library\r\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\r\n **/\r\n\r\nlibrary WadRayMath {\r\n  uint256 internal constant WAD = 1e18;\r\n  uint256 internal constant halfWAD = WAD / 2;\r\n\r\n  uint256 internal constant RAY = 1e27;\r\n  uint256 internal constant halfRAY = RAY / 2;\r\n\r\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\r\n\r\n  /**\r\n   * @return One ray, 1e27\r\n   **/\r\n  function ray() internal pure returns (uint256) {\r\n    return RAY;\r\n  }\r\n\r\n  /**\r\n   * @return One wad, 1e18\r\n   **/\r\n\r\n  function wad() internal pure returns (uint256) {\r\n    return WAD;\r\n  }\r\n\r\n  /**\r\n   * @return Half ray, 1e27/2\r\n   **/\r\n  function halfRay() internal pure returns (uint256) {\r\n    return halfRAY;\r\n  }\r\n\r\n  /**\r\n   * @return Half ray, 1e18/2\r\n   **/\r\n  function halfWad() internal pure returns (uint256) {\r\n    return halfWAD;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two wad, rounding half up to the nearest wad\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return The result of a*b, in wad\r\n   **/\r\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(a <= (type(uint256).max - halfWAD) / b, \"MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * b + halfWAD) / WAD;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two wad, rounding half up to the nearest wad\r\n   * @param a Wad\r\n   * @param b Wad\r\n   * @return The result of a/b, in wad\r\n   **/\r\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"DIVISION_BY_ZERO\");\r\n    uint256 halfB = b / 2;\r\n\r\n    require(a <= (type(uint256).max - halfB) / WAD, \"MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * WAD + halfB) / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Multiplies two ray, rounding half up to the nearest ray\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return The result of a*b, in ray\r\n   **/\r\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0 || b == 0) {\r\n      return 0;\r\n    }\r\n\r\n    require(a <= (type(uint256).max - halfRAY) / b, \"MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * b + halfRAY) / RAY;\r\n  }\r\n\r\n  /**\r\n   * @dev Divides two ray, rounding half up to the nearest ray\r\n   * @param a Ray\r\n   * @param b Ray\r\n   * @return The result of a/b, in ray\r\n   **/\r\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b != 0, \"DIVISION_BY_ZERO\");\r\n    uint256 halfB = b / 2;\r\n\r\n    require(a <= (type(uint256).max - halfB) / RAY, \"MULTIPLICATION_OVERFLOW\");\r\n\r\n    return (a * RAY + halfB) / b;\r\n  }\r\n\r\n  /**\r\n   * @dev Casts ray down to wad\r\n   * @param a Ray\r\n   * @return a casted to wad, rounded half up to the nearest wad\r\n   **/\r\n  function rayToWad(uint256 a) internal pure returns (uint256) {\r\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\r\n    uint256 result = halfRatio + a;\r\n    require(result >= halfRatio, \"ADDITION_OVERFLOW\");\r\n\r\n    return result / WAD_RAY_RATIO;\r\n  }\r\n\r\n  /**\r\n   * @dev Converts wad up to ray\r\n   * @param a Wad\r\n   * @return a converted in ray\r\n   **/\r\n  function wadToRay(uint256 a) internal pure returns (uint256) {\r\n    uint256 result = a * WAD_RAY_RATIO;\r\n    require(result / WAD_RAY_RATIO == a, \"MULTIPLICATION_OVERFLOW\");\r\n    return result;\r\n  }\r\n}\r\n"
    },
    "contracts/interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface ILendingPool {\r\n\r\n  /**\r\n   * @dev Emitted on deposit()\r\n   * @param user The address initiating the deposit\r\n   * @param onBehalfOf The beneficiary of the deposit, receiving the sFIL\r\n   * @param amount The amount deposited\r\n   **/\r\n  event Deposit(\r\n    address user,\r\n    address indexed onBehalfOf,\r\n    uint amount\r\n  );\r\n\r\n  /**\r\n   * @dev Deposits an `amount` of FIL into the reserve, receiving equivalent sFIL in return.\r\n   * @param amount The amount to be deposited\r\n   * @param onBehalfOf The address that will receive the sFIL, same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of sFIL\r\n   *   is a different wallet\r\n   **/\r\n  function deposit(uint amount, address onBehalfOf) external;\r\n\r\n  /**\r\n   * @dev Emitted on withdraw()\r\n   * @param user The address initiating the withdrawal, owner of sFIL\r\n   * @param to Address that will receive the underlying\r\n   * @param amount The amount to be withdrawn\r\n   **/\r\n  event Withdraw(address indexed user, address indexed to, uint amount);\r\n\r\n  /**\r\n   * @dev Withdraws an `amount` of FIL from the reserve, burning the equivalent sFIL owned\r\n   * @param amount The FIL amount to be withdrawn\r\n   *   - Send the value type(uint).max in order to withdraw the whole aToken balance\r\n   * @param to Address that will receive the underlying, same as msg.sender if the user\r\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n   *   different wallet\r\n   * @return The final amount withdrawn\r\n   **/\r\n  function withdraw(uint amount, address to) external returns (uint);\r\n\r\n  /**\r\n   * @dev Emitted on pledge()\r\n   * @param user The address initiating the pledge\r\n   * @param onBehalfOf The beneficiary of the pledge\r\n   * @param amount The amount of SFT pledged\r\n   **/\r\n  event Pledge(address user, address indexed onBehalfOf, uint amount);\r\n\r\n  /**\r\n   * @dev pledge an `amount` of SFT for borrowing FIL from the pool\r\n   * @param amount The amount of SFT\r\n   * @param onBehalfOf The address that will receive the SFT as collateral,same as msg.sender if the user\r\n   *   wants to receive them on his own wallet, or a different address if the beneficiary is a different wallet\r\n   */\r\n  function pledge(uint amount, address onBehalfOf) external;\r\n\r\n  /**\r\n   * @dev Emitted on Unpledge()\r\n   * @param user The address initiating the unpledge\r\n   * @param amount The amount of SFT unpledged\r\n   **/\r\n  event Unpledge(address user, uint amount);\r\n\r\n  /**\r\n   * @dev unpledge an `amount` of SFT from the pool\r\n   * @param amount The amount of SFT\r\n   */\r\n  function unpledge(uint amount) external;\r\n\r\n  /**\r\n   * @dev Emitted on borrow() when debt needs to be opened\r\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow()\r\n   * @param amount The amount borrowed out\r\n   * @param borrowRate The numeric rate at which the user has borrowed\r\n   **/\r\n  event Borrow(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 borrowRate\r\n  );\r\n\r\n  /**\r\n   * @dev Allows users to borrow a specific `amount` of FIL, provided that the borrower already deposited enough collateral\r\n   * @param amount The amount to be borrowed\r\n   **/\r\n  function borrow(uint amount) external;\r\n\r\n  /**\r\n   * @dev Emitted on repay()\r\n   * @param user The address of the user initiating the repay(), providing the funds\r\n   * @param onBehalfOf The beneficiary of the repayment, getting his debt reduced\r\n   * @param paybackAmount The amount repaid\r\n   * @param rewardsToRepay The amount of rewards to cover debt\r\n   * @param margin The amount of FIL user actually need transfer \r\n   **/\r\n  event Repay(\r\n    address indexed user,\r\n    address indexed onBehalfOf,\r\n    uint256 paybackAmount,\r\n    uint256 rewardsToRepay,\r\n    uint256 margin\r\n  );\r\n\r\n\r\n  /**\r\n   * @notice Repays a borrowed `amount` of FIL, burning the equivalent debt tokens owned\r\n   * @param amount The amount to repay\r\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\r\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n   * other borrower whose debt should be removed\r\n   * @return The final amount repaid\r\n   **/\r\n  function repay(uint amount, address onBehalfOf) external returns (uint);\r\n\r\n/**\r\n  * @dev Emitted on liquidate()\r\n  * @param liquidator The address of the liquidator\r\n  * @param user The address of the borrower getting liquidated\r\n  * @param totalDebt The user's totalDebt that liquidator need to cover\r\n  * @param totalCollteral The user's totalCollteral SFT liquidator will receive\r\n  */\r\n  event Liquidate(address liquidator, address indexed user, uint totalDebt, uint totalCollteral);\r\n\r\n /**\r\n  * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n  * @param user The address of the borrower getting liquidated\r\n  * to receive the underlying collateral asset directly\r\n  **/    \r\n  function liquidate(address user) external;\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome() external view returns (uint);\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of asset\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt() external view returns (uint);\r\n\r\n  event DistributeSingleReward(address distributor, address user, uint amount);\r\n  event ClaimReward(address user, uint amount);\r\n  event SetDistributor(address oldDistributor, address newDistributor);\r\n  event SetReserveFactor(uint16 oldReserveFactor, uint16 newReserveFactor);\r\n  event SetInterestRateStrategyAddress(address oldInterestRateStrategyAddress, address newInterestRateStrategyAddress);\r\n}"
    },
    "contracts/interfaces/IReserveInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IReserveInterestRateStrategy {\r\n\r\n  function baseVariableBorrowRate() external view returns (uint256);\r\n\r\n  function getMaxVariableBorrowRate() external view returns (uint256);\r\n\r\n  function calculateInterestRates(\r\n    uint256 availableLiquidity,\r\n    uint256 totalVariableDebt,\r\n    uint256 reserveFactor\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256,\r\n      uint256\r\n    );\r\n\r\n  function calculateInterestRates(\r\n    address reserve,\r\n    address aToken,\r\n    uint256 liquidityAdded,\r\n    uint256 liquidityTaken,\r\n    uint256 totalVariableDebt,\r\n    uint256 reserveFactor\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 liquidityRate,\r\n      uint256 variableBorrowRate\r\n    );\r\n}"
    },
    "contracts/interfaces/IScaledBalanceToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\ninterface IScaledBalanceToken {\r\n  /**\r\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\r\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\r\n   * @param user The user whose balance is calculated\r\n   * @return The scaled balance of the user\r\n   **/\r\n  function scaledBalanceOf(address user) external view returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the scaled balance of the user and the scaled total supply.\r\n   * @param user The address of the user\r\n   * @return The scaled balance of the user\r\n   * @return The scaled balance and the scaled total supply\r\n   **/\r\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\r\n\r\n  /**\r\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\r\n   * @return The scaled total supply\r\n   **/\r\n  function scaledTotalSupply() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ISFilToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"./IScaledBalanceToken.sol\";\r\n\r\ninterface ISFilToken is IERC20, IScaledBalanceToken {\r\n\r\n    /**\r\n   * @dev Emitted after the mint action\r\n   * @param from The address performing the mint\r\n   * @param value The amount being\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  event Mint(address indexed from, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Mints `amount` sFIL to `user`\r\n   * @param user The address receiving the minted tokens\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The new liquidity index of the reserve\r\n   */\r\n  function mint(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n\r\n   /**\r\n   * @dev Emitted after sFIL are burned\r\n   * @param from The owner of the sFIL, getting them burned\r\n   * @param target The address that will receive the underlying\r\n   * @param value The amount being burned\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Emitted during the transfer action\r\n   * @param from The user whose tokens are being transferred\r\n   * @param to The recipient\r\n   * @param value The amount being transferred\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Burns sFIL from `user` and sends the equivalent amount of FIL to `receiver`\r\n   * @param user The owner of the sFIL, getting them burned\r\n   * @param receiver The address that will receive the FIL\r\n   * @param amount The amount being burned\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  function burn(\r\n    address user,\r\n    address receiver,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Mints sFIL to the reserve treasury\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The new liquidity index of the reserve\r\n   */\r\n  function mintToTreasury(uint256 amount, uint256 index) external;\r\n\r\n\r\n  /**\r\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\r\n   * assets in borrow(), withdraw()\r\n   * @param user The recipient of the underlying\r\n   * @param amount The amount getting transferred\r\n   * @return The amount transferred\r\n   **/\r\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\r\n\r\n  /**\r\n   * @dev Returns the address of the underlying asset\r\n   **/\r\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\r\n\r\n  function updateTreasuryAddress(address newTreasuryAddress) external;\r\n    \r\n}"
    },
    "contracts/interfaces/IVariableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"./IScaledBalanceToken.sol\";\r\n\r\ninterface IVariableDebtToken is IScaledBalanceToken {\r\n  /**\r\n   * @dev Emitted after the mint action\r\n   * @param user The address performing the mint\r\n   * @param value The amount to be minted\r\n   * @param index The last index of the reserve\r\n   **/\r\n  event Mint(address indexed user, uint256 value, uint256 index);\r\n\r\n  /**\r\n   * @dev Mints debt token to the `onBehalfOf` address\r\n   * @param user The address receiving the borrowed underlying and the debt token\r\n   * @param amount The amount of debt being minted\r\n   * @param index The variable debt index of the reserve\r\n   **/\r\n  function mint(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n\r\n  /**\r\n   * @dev Emitted when variable debt is burnt\r\n   * @param user The user which debt has been burned\r\n   * @param amount The amount of debt being burned\r\n   * @param index The index of the user\r\n   **/\r\n  event Burn(address indexed user, uint256 amount, uint256 index);\r\n\r\n  /**\r\n   * @dev Burns user variable debt\r\n   * @param user The user which debt is burnt\r\n   * @param index The variable debt index of the reserve\r\n   **/\r\n  function burn(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external;\r\n}"
    },
    "contracts/lendingpool/DefaultInterestRateStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../helper/WadRayMath.sol\";\r\nimport \"../helper/PercentageMath.sol\";\r\nimport \"../interfaces/IReserveInterestRateStrategy.sol\";\r\n\r\n\r\n/**\r\n * @notice Implements the calculation of the interest rates depending on the reserve state\r\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\r\n * point of utilization and another from that one to 100%\r\n * - An instance of this same contract, can't be used across different Aave markets, due to the caching\r\n *   of the LendingPoolAddressesProvider\r\n **/\r\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\r\n    using WadRayMath for uint256;\r\n    using SafeMath for uint256;\r\n    using PercentageMath for uint256;\r\n\r\n    /**\r\n   * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\r\n   * Expressed in ray\r\n   **/\r\n  uint256 public immutable OPTIMAL_UTILIZATION_RATE;\r\n\r\n  /**\r\n   * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\r\n   * 1-optimal utilization rate. Added as a constant here for gas optimizations.\r\n   * Expressed in ray\r\n   **/\r\n\r\n  uint256 public immutable EXCESS_UTILIZATION_RATE;\r\n\r\n\r\n  // Base variable borrow rate when Utilization rate = 0. Expressed in ray\r\n  uint256 internal immutable _baseVariableBorrowRate;\r\n\r\n  // Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n  uint256 internal immutable _variableRateSlope1;\r\n\r\n  // Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\r\n  uint256 internal immutable _variableRateSlope2;\r\n\r\n\r\n  constructor(\r\n    uint256 optimalUtilizationRate,\r\n    uint256 baseVariableBorrowRate,\r\n    uint256 variableRateSlope1,\r\n    uint256 variableRateSlope2\r\n  ) {\r\n    OPTIMAL_UTILIZATION_RATE = optimalUtilizationRate;\r\n    EXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate);\r\n    _baseVariableBorrowRate = baseVariableBorrowRate;\r\n    _variableRateSlope1 = variableRateSlope1;\r\n    _variableRateSlope2 = variableRateSlope2;\r\n  }\r\n\r\n  function variableRateSlope1() external view returns (uint256) {\r\n    return _variableRateSlope1;\r\n  }\r\n\r\n  function variableRateSlope2() external view returns (uint256) {\r\n    return _variableRateSlope2;\r\n  }\r\n\r\n  function baseVariableBorrowRate() external view override returns (uint256) {\r\n    return _baseVariableBorrowRate;\r\n  }\r\n\r\n  function getMaxVariableBorrowRate() external view override returns (uint256) {\r\n    return _baseVariableBorrowRate.add(_variableRateSlope1).add(_variableRateSlope2);\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the interest rates depending on the reserve's state and configurations\r\n   * @param reserve The address of the reserve\r\n   * @param liquidityAdded The liquidity added during the operation\r\n   * @param liquidityTaken The liquidity taken during the operation\r\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\r\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\r\n   * @return The liquidity rate and the variable borrow rate\r\n   **/\r\n  function calculateInterestRates(\r\n    address reserve,\r\n    address sFilToken,\r\n    uint256 liquidityAdded,\r\n    uint256 liquidityTaken,\r\n    uint256 totalVariableDebt,\r\n    uint256 reserveFactor\r\n  )\r\n    external\r\n    view\r\n    override\r\n    returns (\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    uint256 availableLiquidity = IERC20(reserve).balanceOf(sFilToken);\r\n    //avoid stack too deep\r\n    availableLiquidity = availableLiquidity.add(liquidityAdded).sub(liquidityTaken);\r\n\r\n    return\r\n      calculateInterestRates(\r\n        availableLiquidity,\r\n        totalVariableDebt,\r\n        reserveFactor\r\n      );\r\n  }\r\n\r\n  struct CalcInterestRatesLocalVars {\r\n    uint256 totalDebt;\r\n    uint256 currentVariableBorrowRate;\r\n    uint256 currentLiquidityRate;\r\n    uint256 utilizationRate;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the interest rates depending on the reserve's state and configurations.\r\n   * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\r\n   * New protocol implementation uses the new calculateInterestRates() interface\r\n   * @param availableLiquidity The liquidity available in the corresponding aToken\r\n   * @param totalVariableDebt The total borrowed from the reserve at a variable rate\r\n   * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\r\n   * @return The liquidity rate and the variable borrow rate\r\n   **/\r\n  function calculateInterestRates(\r\n    uint256 availableLiquidity,\r\n    uint256 totalVariableDebt,\r\n    uint256 reserveFactor\r\n  )\r\n    public\r\n    view\r\n    override\r\n    returns (\r\n      uint256,\r\n      uint256\r\n    )\r\n  {\r\n    CalcInterestRatesLocalVars memory vars;\r\n\r\n    vars.totalDebt = totalVariableDebt;\r\n    vars.currentVariableBorrowRate = 0;\r\n    vars.currentLiquidityRate = 0;\r\n\r\n    vars.utilizationRate = vars.totalDebt == 0\r\n      ? 0\r\n      : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\r\n\r\n    if (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\r\n      uint256 excessUtilizationRateRatio =\r\n        vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(EXCESS_UTILIZATION_RATE);\r\n\r\n      vars.currentVariableBorrowRate = _baseVariableBorrowRate.add(_variableRateSlope1).add(\r\n        _variableRateSlope2.rayMul(excessUtilizationRateRatio)\r\n      );\r\n    } else {\r\n      vars.currentVariableBorrowRate = _baseVariableBorrowRate.add(\r\n        vars.utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE)\r\n      );\r\n    }\r\n\r\n    vars.currentLiquidityRate = \r\n      vars.currentVariableBorrowRate\r\n      .rayMul(vars.utilizationRate)\r\n      .percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(reserveFactor));\r\n\r\n    return (\r\n      vars.currentLiquidityRate,\r\n      vars.currentVariableBorrowRate\r\n    );\r\n  }\r\n}"
    },
    "contracts/lendingpool/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"../interfaces/ISFilToken.sol\";\r\nimport \"../interfaces/ILendingPool.sol\";\r\nimport \"../interfaces/IVariableDebtToken.sol\";\r\nimport \"./logic/ReserveLogic.sol\";\r\nimport \"./logic/GenericLogic.sol\";\r\nimport \"../helper/PercentageMath.sol\";\r\nimport \"../types/DataTypes.sol\";\r\n\r\n\r\ncontract LendingPool is ILendingPool, Ownable2StepUpgradeable {\r\n    using ReserveLogic for DataTypes.ReserveData;\r\n    using SafeERC20 for IERC20;\r\n    using PercentageMath for uint256;\r\n\r\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\r\n    uint256 public constant RAY = 1e27;\r\n\r\n    address public filToken;\r\n    address public sftToken;\r\n    address public distributor;\r\n    DataTypes.ReserveData public reserve;\r\n    mapping (address => uint) public pledges; // address => SFT amount\r\n    mapping (address => uint) public rewards; // plege SFT also can earn rewards\r\n\r\n    function initialize(\r\n        address _filToken,\r\n        address _sftToken,\r\n        address _distributor,\r\n        address _sFilTokenAddress,\r\n        address _variableDebtTokenAddress,\r\n        address _interestRateStrategyAddress,\r\n        uint16 _reserveFactor,\r\n        uint16 _ltv,\r\n        uint16 _liquidationThreshold\r\n        ) external initializer {\r\n        require(address(_filToken) != address(0), \"fil token address cannot be zero\");\r\n        require(address(_sftToken) != address(0), \"SFT token address cannot be zero\");\r\n        require(address(_sFilTokenAddress) != address(0), \"sFil token address cannot be zero\");\r\n        require(address(_variableDebtTokenAddress) != address(0), \"variableDebt token address cannot be zero\");\r\n        require(address(_interestRateStrategyAddress) != address(0), \"interestRateStrategy address cannot be zero\");\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n        filToken = _filToken;\r\n        sftToken = _sftToken;\r\n        _setDistributor(_distributor);\r\n        reserve.sFilTokenAddress = _sFilTokenAddress;\r\n        reserve.variableDebtTokenAddress = _variableDebtTokenAddress;\r\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\r\n        reserve.reserveFactor = _reserveFactor;\r\n        reserve.ltv = _ltv;\r\n        reserve.liquidationThreshold = _liquidationThreshold;\r\n        reserve.liquidityIndex = uint128(RAY);\r\n        reserve.variableBorrowIndex = uint128(RAY);\r\n    }\r\n\r\n    function setDistributor(address newDistributor) external onlyOwner {\r\n        _setDistributor(newDistributor);\r\n    }\r\n\r\n    function _setDistributor(address _distributor) private {\r\n        emit SetDistributor(distributor, _distributor);\r\n        distributor = _distributor;\r\n    }\r\n\r\n    function setReserveFactor(uint16 newReserveFactor) external onlyOwner {\r\n        _setReserveFactor(newReserveFactor);\r\n    }\r\n\r\n    function _setReserveFactor(uint16 _reserveFactor) private {\r\n        emit SetReserveFactor(reserve.reserveFactor, _reserveFactor);\r\n        reserve.reserveFactor = _reserveFactor;\r\n    }\r\n\r\n    function setInterestRateStrategyAddress(address newInterestRateStrategyAddress) external onlyOwner {\r\n        _setInterestRateStrategyAddress(newInterestRateStrategyAddress);\r\n    }\r\n\r\n    function _setInterestRateStrategyAddress(address _interestRateStrategyAddress) private {\r\n        emit SetInterestRateStrategyAddress(reserve.interestRateStrategyAddress, _interestRateStrategyAddress);\r\n        reserve.interestRateStrategyAddress = _interestRateStrategyAddress;\r\n    }\r\n\r\n    function updateTreasuryAddress(address newTreasuryAddress) external onlyOwner {\r\n        ISFilToken(reserve.sFilTokenAddress).updateTreasuryAddress(newTreasuryAddress);\r\n    }\r\n\r\n    function getReserveData() public view returns (DataTypes.ReserveData memory) {\r\n        return reserve;\r\n    }\r\n\r\n    function getUserAccountData(address user) public view returns (\r\n        uint totalCollateral,\r\n        uint totalDebt,\r\n        uint availableBorrows,\r\n        uint healthFactor\r\n    ) {\r\n        totalCollateral = pledges[user];\r\n        totalDebt = IERC20(reserve.variableDebtTokenAddress).balanceOf(user);\r\n        availableBorrows = GenericLogic.calculateAvailableBorrow(totalCollateral, totalDebt, reserve.ltv);\r\n        healthFactor = GenericLogic.calculateHealthFactor(totalCollateral, totalDebt, reserve.liquidationThreshold);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Deposits an `amount` of FIL into the reserve, receiving equivalent sFIL in return.\r\n     * @param amount The amount to be deposited\r\n     * @param onBehalfOf The address that will receive the sFIL, same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of sFIL\r\n     *   is a different wallet\r\n     **/\r\n    function deposit(uint amount, address onBehalfOf) external {\r\n        address sFilToken = reserve.sFilTokenAddress;\r\n        reserve.updateState();\r\n        reserve.updateInterestRates(filToken, sFilToken, amount, 0);\r\n        IERC20(filToken).safeTransferFrom(address(msg.sender), sFilToken, amount);\r\n        ISFilToken(sFilToken).mint(onBehalfOf, amount, reserve.liquidityIndex);\r\n        emit Deposit(msg.sender, onBehalfOf, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws an `amount` of FIL from the reserve, burning the equivalent sFIL owned\r\n     * @param amount The FIL amount to be withdrawn\r\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\r\n     * @param to Address that will receive the underlying, same as msg.sender if the user\r\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\r\n     *   different wallet\r\n     * @return The final amount withdrawn\r\n     **/\r\n    function withdraw(uint amount, address to) external returns (uint) {\r\n        address sFilToken = reserve.sFilTokenAddress;\r\n        uint userBalance = ISFilToken(sFilToken).balanceOf(address(msg.sender));\r\n        require(amount <= userBalance, \"NOT_ENOUGH_AVAILABLE_USER_BALANCE\");\r\n        uint256 amountToWithdraw = amount;\r\n        if (amount == type(uint256).max) {\r\n            amountToWithdraw = userBalance;\r\n        }\r\n        reserve.updateState();\r\n        reserve.updateInterestRates(filToken, sFilToken, 0, amountToWithdraw);\r\n        ISFilToken(sFilToken).burn(address(msg.sender), to, amountToWithdraw, reserve.liquidityIndex);\r\n        emit Withdraw(msg.sender, to, amountToWithdraw);\r\n        return amountToWithdraw;\r\n    }\r\n\r\n    /**\r\n     * @dev pledge an `amount` of SFT for borrowing FIL from the pool\r\n     * @param amount The amount of SFT\r\n     * @param onBehalfOf The address that will receive the SFT as collateral,same as msg.sender if the user\r\n     *   wants to receive them on his own wallet, or a different address if the beneficiary is a different wallet\r\n     */\r\n    function pledge(uint amount, address onBehalfOf) external {\r\n        require(IERC20(sftToken).allowance(address(msg.sender), address(this)) >= amount, \"SFT_APPROVE_NOT_ENOUGH\");\r\n        require(IERC20(sftToken).balanceOf(address(msg.sender)) >= amount, \"SFT_BALANCE_NOT_ENOUGH\");\r\n        IERC20(sftToken).safeTransferFrom(address(msg.sender), address(this), amount);\r\n        pledges[onBehalfOf] += amount;\r\n        emit Pledge(msg.sender, onBehalfOf, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev unpledge an `amount` of SFT from the pool\r\n     * @param amount The amount of SFT\r\n     */\r\n    function unpledge(uint amount) external {\r\n        require(amount <= pledges[msg.sender], \"UNPLEDGE_AMOUNT_NOT_ENOUGH\");\r\n        uint totalCollateral = pledges[msg.sender] - amount;\r\n        uint totalDebt = IERC20(reserve.variableDebtTokenAddress).balanceOf(address(msg.sender));\r\n        require(totalCollateral.percentMul(reserve.ltv) >= totalDebt, \"INVALID_AMOUNT\");\r\n        pledges[msg.sender] -= amount;\r\n        IERC20(sftToken).safeTransfer(address(msg.sender), amount);\r\n        emit Unpledge(msg.sender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Allows users to borrow a specific `amount` of FIL, provided that the borrower already deposited enough collateral\r\n     * @param amount The amount to be borrowed\r\n     **/\r\n    function borrow(uint amount) external {\r\n        (, ,uint availableBorrows,) = getUserAccountData(address(msg.sender));\r\n        require(availableBorrows >= amount, \"AVAILABLE_BORROWS_NOT_ENOUGH\");\r\n        reserve.updateState();\r\n        IVariableDebtToken(reserve.variableDebtTokenAddress).mint(address(msg.sender), amount, reserve.variableBorrowIndex);\r\n        reserve.updateInterestRates(filToken, reserve.sFilTokenAddress, 0, amount);\r\n        ISFilToken(reserve.sFilTokenAddress).transferUnderlyingTo(address(msg.sender), amount);\r\n        emit Borrow(msg.sender, amount, reserve.currentVariableBorrowRate);\r\n    }\r\n\r\n    /**\r\n     * @notice Repays a borrowed `amount` of FIL, burning the equivalent debt tokens owned\r\n     * @param amount The amount to repay\r\n     * - Send the value type(uint256).max in order to repay the whole debt\r\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\r\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\r\n     * other borrower whose debt should be removed\r\n     * @return The final amount repaid\r\n     **/\r\n    function repay(uint amount, address onBehalfOf) public returns (uint) {\r\n        \r\n        uint256 margin = 0; // user actual need transfered FIL amount\r\n        uint256 userDebt = IERC20(reserve.variableDebtTokenAddress).balanceOf(onBehalfOf);\r\n        uint256 userRewards = rewards[address(msg.sender)];\r\n        uint paybackAmount = amount < userDebt? amount : userDebt;\r\n        uint256 rewardsToRepay = userRewards >= paybackAmount? paybackAmount : userRewards;\r\n        margin = paybackAmount - rewardsToRepay;\r\n        \r\n        require(IERC20(filToken).allowance(address(msg.sender), address(this)) >= margin, \"FIL_ALLOWANCE_NOT_ENOUGH\");\r\n        require(IERC20(filToken).balanceOf(address(msg.sender)) >= margin, \"FIL_BALANCE_NOT_ENOUGH\");\r\n        reserve.updateState();\r\n        IVariableDebtToken(reserve.variableDebtTokenAddress).burn(onBehalfOf, paybackAmount, reserve.variableBorrowIndex);\r\n        address sFILToken = reserve.sFilTokenAddress;\r\n        reserve.updateInterestRates(filToken, sFILToken, paybackAmount, 0);\r\n        IERC20(filToken).safeTransferFrom(msg.sender, reserve.sFilTokenAddress, margin);\r\n        rewards[msg.sender] -= rewardsToRepay;\r\n        IERC20(filToken).safeTransfer(reserve.sFilTokenAddress, rewardsToRepay);\r\n        emit Repay(msg.sender, onBehalfOf, paybackAmount, rewardsToRepay, margin);\r\n        return paybackAmount;\r\n    }\r\n\r\n   /**\r\n    * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\r\n    * @param user The address of the borrower getting liquidated\r\n    * to receive the underlying collateral asset directly\r\n    **/    \r\n    function liquidate(address user) external {\r\n        ( ,uint totalDebt, ,uint healthFactor) = getUserAccountData(user);\r\n        require(\r\n            healthFactor < HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\r\n            \"HEALTH_FACTOR_ABOVE_THRESHOLD\"\r\n        );\r\n        repay(totalDebt, user);\r\n        IERC20(sftToken).transfer(address(msg.sender), pledges[user]);\r\n        delete pledges[user];\r\n        emit Liquidate(msg.sender, user, totalDebt, pledges[user]);\r\n    }\r\n\r\n    function distributeReward(address[] calldata userList, uint[] calldata rewardList, uint totalRewards) external {\r\n        require(address(msg.sender) == distributor, \"ONLY_DISTRIBUTOR_CAN_CALL\");\r\n        require(userList.length == rewardList.length, \"INCORRECT_PARAM\");\r\n        require(IERC20(filToken).allowance(address(msg.sender), address(this)) >= totalRewards, \"FIL_TOKEN_APPROVE_NOT_ENOUGH\");\r\n        require(IERC20(filToken).balanceOf(address(msg.sender)) >= totalRewards, \"FIL_TOKEN_BALANCE_NOT_ENOUGH\");\r\n        for (uint i = 0; i < userList.length; i++) {\r\n            rewards[userList[i]] += rewardList[i];\r\n            emit DistributeSingleReward(distributor, userList[i], rewardList[i]);\r\n        }\r\n        IERC20(filToken).safeTransferFrom(address(msg.sender), address(this), totalRewards);\r\n    }\r\n\r\n    function claimReward() external {\r\n        require(pledges[msg.sender] == 0, \"MUST_UNPLEGE_ALL_COLLATERAL\");\r\n        uint claimAmount = rewards[msg.sender];\r\n        require(IERC20(filToken).balanceOf(address(this)) >= claimAmount);\r\n        delete rewards[msg.sender];\r\n        IERC20(filToken).safeTransfer(address(msg.sender), claimAmount);\r\n        emit ClaimReward(msg.sender, claimAmount);\r\n    }\r\n\r\n  /**\r\n   * @dev Returns the normalized income normalized income of the reserve\r\n   * @return The reserve's normalized income\r\n   */\r\n  function getReserveNormalizedIncome() external view returns (uint256) {\r\n    return reserve.getNormalizedIncome();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the normalized variable debt per unit of FIL\r\n   * @return The reserve normalized variable debt\r\n   */\r\n  function getReserveNormalizedVariableDebt() external view returns (uint256) {\r\n    return reserve.getNormalizedDebt();\r\n  }\r\n}"
    },
    "contracts/lendingpool/logic/GenericLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../../types/DataTypes.sol\";\r\nimport \"../../helper/WadRayMath.sol\";\r\nimport \"../../helper/PercentageMath.sol\";\r\n\r\nlibrary GenericLogic {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n    using PercentageMath for uint256;\r\n\r\n    uint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\r\n\r\n\r\n  /**\r\n   * @dev Calculates the health factor\r\n   * @param totalCollateral The total collateral in ETH\r\n   * @param totalDebt The total debt in ETH\r\n   * @param liquidationThreshold The liquidation threshold\r\n   * @return The health factor calculated from the balances provided\r\n   **/\r\n  function calculateHealthFactor(\r\n    uint256 totalCollateral,\r\n    uint256 totalDebt,\r\n    uint256 liquidationThreshold\r\n  ) internal pure returns (uint256) {\r\n    if (totalDebt == 0) return type(uint256).max;\r\n\r\n    return (totalCollateral.percentMul(liquidationThreshold)).wadDiv(totalDebt);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Calculates the equivalent amount in ETH that an user can borrow, depending on the available collateral and the\r\n   * average Loan To Value\r\n   * @param totalCollateral The total SFT amount as collateral\r\n   * @param totalDebt The total borrow balance\r\n   * @param ltv The loan to value\r\n   * @return the amount available FIL to borrow for the user\r\n   **/\r\n  function calculateAvailableBorrow(\r\n    uint256 totalCollateral,\r\n    uint256 totalDebt,\r\n    uint256 ltv\r\n  ) external pure returns (uint256) {\r\n    uint256 availableBorrows = totalCollateral.percentMul(ltv);\r\n\r\n    if (availableBorrows < totalDebt) {\r\n      return 0;\r\n    }\r\n\r\n    availableBorrows = availableBorrows.sub(totalDebt);\r\n    return availableBorrows;\r\n  }\r\n}"
    },
    "contracts/lendingpool/logic/ReserveLogic.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"../../interfaces/IReserveInterestRateStrategy.sol\";\r\nimport \"../../interfaces/IVariableDebtToken.sol\";\r\nimport \"../../interfaces/ISFilToken.sol\";\r\nimport \"../../helper/WadRayMath.sol\";\r\nimport \"../../helper/PercentageMath.sol\";\r\nimport \"../../helper/MathUtils.sol\";\r\nimport \"../../types/DataTypes.sol\";\r\n\r\nlibrary ReserveLogic {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256;\r\n    using PercentageMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    using ReserveLogic for DataTypes.ReserveData;\r\n\r\n    /**\r\n   * @dev Emitted when the state of a reserve is updated\r\n   * @param asset The address of the underlying asset of the reserve\r\n   * @param liquidityRate The new liquidity rate\r\n   * @param variableBorrowRate The new variable borrow rate\r\n   * @param liquidityIndex The new liquidity index\r\n   * @param variableBorrowIndex The new variable borrow index\r\n   **/\r\n  event ReserveDataUpdated(\r\n    address indexed asset,\r\n    uint256 liquidityRate,\r\n    uint256 variableBorrowRate,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex\r\n  );\r\n\r\n  /**\r\n   * @dev Returns the ongoing normalized income for the reserve\r\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\r\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\r\n   * @param reserve The reserve object\r\n   * @return the normalized income. expressed in ray\r\n   **/\r\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint40 timestamp = reserve.lastUpdateTimestamp;\r\n\r\n    //solium-disable-next-line\r\n    if (timestamp == uint40(block.timestamp)) {\r\n      //if the index was updated in the same block, no need to perform any calculation\r\n      return reserve.liquidityIndex;\r\n    }\r\n\r\n    uint256 cumulated =\r\n      MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\r\n        reserve.liquidityIndex\r\n      );\r\n    return cumulated;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the ongoing normalized variable debt for the reserve\r\n   * A value of 1e27 means there is no debt. As time passes, the income is accrued\r\n   * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\r\n   * @param reserve The reserve object\r\n   * @return The normalized variable debt. expressed in ray\r\n   **/\r\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n  {\r\n    uint40 timestamp = reserve.lastUpdateTimestamp;\r\n\r\n    //solium-disable-next-line\r\n    if (timestamp == uint40(block.timestamp)) {\r\n      //if the index was updated in the same block, no need to perform any calculation\r\n      return reserve.variableBorrowIndex;\r\n    }\r\n\r\n    uint256 cumulated =\r\n      MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\r\n        reserve.variableBorrowIndex\r\n      );\r\n\r\n    return cumulated;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\r\n   * @param reserve the reserve object\r\n   **/\r\n  function updateState(DataTypes.ReserveData storage reserve) internal {\r\n    uint256 scaledVariableDebt =\r\n      IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\r\n    uint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\r\n    uint256 previousLiquidityIndex = reserve.liquidityIndex;\r\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\r\n\r\n    (uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) =\r\n      _updateIndexes(\r\n        reserve,\r\n        scaledVariableDebt,\r\n        previousLiquidityIndex,\r\n        previousVariableBorrowIndex,\r\n        lastUpdatedTimestamp\r\n      );\r\n\r\n    _mintToTreasury(\r\n      reserve,\r\n      scaledVariableDebt,\r\n      previousVariableBorrowIndex,\r\n      newLiquidityIndex,\r\n      newVariableBorrowIndex\r\n    );\r\n  }\r\n\r\n\r\n  struct UpdateInterestRatesLocalVars {\r\n    uint256 availableLiquidity;\r\n    uint256 newLiquidityRate;\r\n    uint256 newVariableRate;\r\n    uint256 totalVariableDebt;\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the reserve the current variable borrow rate and the current liquidity rate\r\n   * @param reserve The address of the reserve to be updated\r\n   * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\r\n   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\r\n   **/\r\n  function updateInterestRates(\r\n    DataTypes.ReserveData storage reserve,\r\n    address reserveAddress,\r\n    address sFilTokenAddress,\r\n    uint256 liquidityAdded,\r\n    uint256 liquidityTaken\r\n  ) internal {\r\n    UpdateInterestRatesLocalVars memory vars;\r\n\r\n    //calculates the total variable debt locally using the scaled total supply instead\r\n    //of totalSupply(), as it's noticeably cheaper. Also, the index has been\r\n    //updated by the previous updateState() call\r\n    vars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress)\r\n      .scaledTotalSupply()\r\n      .rayMul(reserve.variableBorrowIndex);\r\n\r\n    (\r\n      vars.newLiquidityRate,\r\n      vars.newVariableRate\r\n    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\r\n      reserveAddress,\r\n      sFilTokenAddress,\r\n      liquidityAdded,\r\n      liquidityTaken,\r\n      vars.totalVariableDebt,\r\n      reserve.reserveFactor\r\n    );\r\n    require(vars.newLiquidityRate <= type(uint128).max, \"LIQUIDITY_RATE_OVERFLOW\");\r\n    require(vars.newVariableRate <= type(uint128).max, \"VARIABLE_BORROW_RATE_OVERFLOW\");\r\n\r\n    reserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\r\n    reserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\r\n\r\n    emit ReserveDataUpdated(\r\n      reserveAddress,\r\n      vars.newLiquidityRate,\r\n      vars.newVariableRate,\r\n      reserve.liquidityIndex,\r\n      reserve.variableBorrowIndex\r\n    );\r\n  }\r\n\r\n  struct MintToTreasuryLocalVars {\r\n    uint256 currentVariableDebt;\r\n    uint256 previousVariableDebt;\r\n    uint256 totalDebtAccrued;\r\n    uint256 amountToMint;\r\n    uint256 reserveFactor;\r\n  }\r\n\r\n  /**\r\n   * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor\r\n   * @param reserve The reserve reserve to be updated\r\n   * @param scaledVariableDebt The current scaled total variable debt\r\n   * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\r\n   * @param newLiquidityIndex The new liquidity index\r\n   * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\r\n   **/\r\n  function _mintToTreasury(\r\n    DataTypes.ReserveData storage reserve,\r\n    uint256 scaledVariableDebt,\r\n    uint256 previousVariableBorrowIndex,\r\n    uint256 newLiquidityIndex,\r\n    uint256 newVariableBorrowIndex\r\n  ) internal {\r\n    MintToTreasuryLocalVars memory vars;\r\n\r\n    vars.reserveFactor = reserve.reserveFactor;\r\n\r\n    if (vars.reserveFactor == 0) {\r\n      return;\r\n    }\r\n\r\n    //calculate the last principal variable debt\r\n    vars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\r\n\r\n    //calculate the new total supply after accumulation of the index\r\n    vars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\r\n\r\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\r\n    vars.totalDebtAccrued = vars.currentVariableDebt.sub(vars.previousVariableDebt);\r\n\r\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\r\n\r\n    if (vars.amountToMint != 0) {\r\n      ISFilToken(reserve.sFilTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the reserve indexes and the timestamp of the update\r\n   * @param reserve The reserve to be updated\r\n   * @param scaledVariableDebt The scaled variable debt\r\n   * @param liquidityIndex The last stored liquidity index\r\n   * @param variableBorrowIndex The last stored variable borrow index\r\n   **/\r\n  function _updateIndexes(\r\n    DataTypes.ReserveData storage reserve,\r\n    uint256 scaledVariableDebt,\r\n    uint256 liquidityIndex,\r\n    uint256 variableBorrowIndex,\r\n    uint40 timestamp\r\n  ) internal returns (uint256, uint256) {\r\n    uint256 currentLiquidityRate = reserve.currentLiquidityRate;\r\n\r\n    uint256 newLiquidityIndex = liquidityIndex;\r\n    uint256 newVariableBorrowIndex = variableBorrowIndex;\r\n\r\n    //only cumulating if there is any income being produced\r\n    if (currentLiquidityRate > 0) {\r\n      uint256 cumulatedLiquidityInterest =\r\n        MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\r\n      newLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\r\n      require(newLiquidityIndex <= type(uint128).max, \"LIQUIDITY_INDEX_OVERFLOW\");\r\n\r\n      reserve.liquidityIndex = uint128(newLiquidityIndex);\r\n\r\n      //as the liquidity rate might come only from stable rate loans, we need to ensure\r\n      //that there is actual variable debt before accumulating\r\n      if (scaledVariableDebt != 0) {\r\n        uint256 cumulatedVariableBorrowInterest =\r\n          MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp);\r\n        newVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\r\n        require(\r\n          newVariableBorrowIndex <= type(uint128).max,\r\n          \"VARIABLE_BORROW_INDEX_OVERFLOW\"\r\n        );\r\n        reserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\r\n      }\r\n    }\r\n\r\n    //solium-disable-next-line\r\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\r\n    return (newLiquidityIndex, newVariableBorrowIndex);\r\n  }\r\n}"
    },
    "contracts/misc/upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\r\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\r\n\r\n// empty contract use to trigger hardhat compile upgrade artifacts"
    },
    "contracts/tokenization/base/BaseERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract BaseERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) internal _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 internal _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function _setName(string memory newName) internal {\r\n        _name = newName;\r\n    }\r\n\r\n    function _setSymbol(string memory newSymbol) internal {\r\n        _symbol = newSymbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n"
    },
    "contracts/tokenization/base/DebtTokenBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.9;\r\n\r\nimport \"./BaseERC20.sol\";\r\nimport '../../interfaces/ILendingPool.sol';\r\n\r\n/**\r\n * @title DebtTokenBase\r\n * @notice Base contract for different types of debt tokens, like StableDebtToken or VariableDebtToken\r\n */\r\n\r\nabstract contract DebtTokenBase is BaseERC20('DEBTTOKEN_IMPL', 'DEBTTOKEN_IMPL') {\r\n\r\n  /**\r\n   * @dev Only lending pool can call functions marked by this modifier\r\n   **/\r\n  modifier onlyLendingPool {\r\n    require(_msgSender() == address(_getLendingPool()), \"CALLER_MUST_BE_LENDING_POOL\");\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Being non transferrable, the debt token does not implement any of the\r\n   * standard ERC20 functions for transfer and allowance.\r\n   **/\r\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n    recipient;\r\n    amount;\r\n    revert('TRANSFER_NOT_SUPPORTED');\r\n  }\r\n\r\n  function allowance(address owner, address spender)\r\n    public\r\n    view\r\n    virtual\r\n    override\r\n    returns (uint256)\r\n  {\r\n    owner;\r\n    spender;\r\n    revert('ALLOWANCE_NOT_SUPPORTED');\r\n  }\r\n\r\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n    spender;\r\n    amount;\r\n    revert('APPROVAL_NOT_SUPPORTED');\r\n  }\r\n\r\n  function transferFrom(\r\n    address sender,\r\n    address recipient,\r\n    uint256 amount\r\n  ) public virtual override returns (bool) {\r\n    sender;\r\n    recipient;\r\n    amount;\r\n    revert('TRANSFER_NOT_SUPPORTED');\r\n  }\r\n\r\n  function increaseAllowance(address spender, uint256 addedValue)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    spender;\r\n    addedValue;\r\n    revert('ALLOWANCE_NOT_SUPPORTED');\r\n  }\r\n\r\n  function decreaseAllowance(address spender, uint256 subtractedValue)\r\n    public\r\n    virtual\r\n    override\r\n    returns (bool)\r\n  {\r\n    spender;\r\n    subtractedValue;\r\n    revert('ALLOWANCE_NOT_SUPPORTED');\r\n  }\r\n\r\n  function _getLendingPool() internal view virtual returns (ILendingPool);\r\n}\r\n"
    },
    "contracts/tokenization/SFilToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./base/BaseERC20.sol\";\r\nimport \"../helper/WadRayMath.sol\";\r\nimport \"../interfaces/ILendingPool.sol\";\r\nimport \"../interfaces/ISFilToken.sol\";\r\n\r\ncontract SFilToken is Initializable, BaseERC20('ERC20_IMPL', 'ERC20_IMPL'), ISFilToken {\r\n    using WadRayMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    ILendingPool internal _pool;\r\n    address internal _treasury;\r\n    address internal _underlyingAsset;\r\n\r\n    modifier onlyLendingPool {\r\n    require(_msgSender() == address(_pool), \"CALLER_MUST_BE_LENDING_POOL\");\r\n    _;\r\n  }\r\n\r\n  function initialize(\r\n    ILendingPool pool,\r\n    address treasury,\r\n    address underlyingAsset,\r\n    string calldata tokenName, \r\n    string calldata tokenSymbol\r\n  ) external initializer {\r\n    _pool = pool;\r\n    _treasury = treasury;\r\n    _underlyingAsset = underlyingAsset;\r\n    _setName(tokenName);\r\n    _setSymbol(tokenSymbol);\r\n  }\r\n\r\n  function updateTreasuryAddress(address newTreasuryAddress) external onlyLendingPool {\r\n    _treasury = newTreasuryAddress;\r\n  }\r\n\r\n  /**\r\n   * @dev Calculates the balance of the user: principal balance + interest generated by the principal\r\n   * @param user The user whose balance is calculated\r\n   * @return The balance of the user\r\n   **/\r\n  function balanceOf(address user)\r\n    public\r\n    view\r\n    override(BaseERC20, IERC20)\r\n    returns (uint256)\r\n  {\r\n    return super.balanceOf(user).rayMul(_pool.getReserveNormalizedIncome());\r\n  }\r\n\r\n  /**\r\n   * @dev calculates the total supply of sFIL\r\n   * since the balance of every single user increases over time, the total supply\r\n   * does that too.\r\n   * @return the current total supply\r\n   **/\r\n  function totalSupply() public view override(BaseERC20, IERC20) returns (uint256) {\r\n    uint256 currentSupplyScaled = super.totalSupply();\r\n\r\n    if (currentSupplyScaled == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return currentSupplyScaled.rayMul(_pool.getReserveNormalizedIncome());\r\n  }\r\n\r\n  /**\r\n   * @dev Burns sFIL from `user` and sends the equivalent amount of FIL to `receiverOfUnderlying`\r\n   * - Only callable by the LendingPool, as extra state updates there need to be managed\r\n   * @param user The owner of the sFIL, getting them burned\r\n   * @param receiver The address that will receive the FIL\r\n   * @param amount The amount being burned\r\n   * @param index The new liquidity index of the reserve\r\n   **/\r\n  function burn(\r\n    address user,\r\n    address receiver,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external override onlyLendingPool {\r\n    uint256 amountScaled = amount.rayDiv(index);\r\n    _burn(user, amountScaled);\r\n\r\n    IERC20(_underlyingAsset).safeTransfer(receiver, amount);\r\n\r\n    emit Transfer(user, address(0), amount);\r\n    emit Burn(user, receiver, amount, index);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Mints `amount` sFIL to `user`\r\n   * - Only callable by the LendingPool, as extra state updates there need to be managed\r\n   * @param user The address receiving the minted tokens\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The new liquidity index of the reserve\r\n   */\r\n  function mint(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external override onlyLendingPool {\r\n\r\n    uint256 amountScaled = amount.rayDiv(index);\r\n    _mint(user, amountScaled);\r\n\r\n    emit Transfer(address(0), user, amount);\r\n    emit Mint(user, amount, index);\r\n  }\r\n\r\n  /**\r\n   * @dev Mints sFIL to the reserve treasury\r\n   * - Only callable by the LendingPool\r\n   * @param amount The amount of tokens getting minted\r\n   * @param index The new liquidity index of the reserve\r\n   */\r\n  function mintToTreasury(uint256 amount, uint256 index) external override onlyLendingPool {\r\n    if (amount == 0) {\r\n      return;\r\n    }\r\n\r\n    address treasury = _treasury;\r\n\r\n    // Compared to the normal mint, we don't check for rounding errors.\r\n    // The amount to mint can easily be very small since it is a fraction of the interest ccrued.\r\n    // In that case, the treasury will experience a (very small) loss, but it\r\n    // wont cause potentially valid transactions to fail.\r\n    _mint(treasury, amount.rayDiv(index));\r\n\r\n    emit Transfer(address(0), treasury, amount);\r\n    emit Mint(treasury, amount, index);\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\r\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\r\n   * @param user The user whose balance is calculated\r\n   * @return The scaled balance of the user\r\n   **/\r\n  function scaledBalanceOf(address user) external view override returns (uint256) {\r\n    return super.balanceOf(user);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the scaled balance of the user and the scaled total supply.\r\n   * @param user The address of the user\r\n   * @return The scaled balance of the user\r\n   * @return The scaled balance and the scaled total supply\r\n   **/\r\n  function getScaledUserBalanceAndSupply(address user)\r\n    external\r\n    view\r\n    override\r\n    returns (uint256, uint256)\r\n  {\r\n    return (super.balanceOf(user), super.totalSupply());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\r\n   * @return the scaled total supply\r\n   **/\r\n  function scaledTotalSupply() public view virtual override returns (uint256) {\r\n    return super.totalSupply();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the Aave treasury, receiving the fees on sFIL\r\n   **/\r\n  function RESERVE_TREASURY_ADDRESS() public view returns (address) {\r\n    return _treasury;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the underlying asset\r\n   **/\r\n  function UNDERLYING_ASSET_ADDRESS() public override view returns (address) {\r\n    return _underlyingAsset;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the lending pool \r\n   **/\r\n  function POOL() public view returns (ILendingPool) {\r\n    return _pool;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\r\n   * assets in borrow(), withdraw()\r\n   * @param target The recipient of sFIL\r\n   * @param amount The amount getting transferred\r\n   * @return The amount transferred\r\n   **/\r\n  function transferUnderlyingTo(address target, uint256 amount)\r\n    external\r\n    override\r\n    onlyLendingPool\r\n    returns (uint256)\r\n  {\r\n    IERC20(_underlyingAsset).safeTransfer(target, amount);\r\n    return amount;\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the sFIL between two users. \r\n   * @param from The source address\r\n   * @param to The destination address\r\n   * @param amount The amount getting transferred\r\n   **/\r\n  function _transfer(\r\n    address from,\r\n    address to,\r\n    uint256 amount\r\n  ) internal override {\r\n    ILendingPool pool = _pool;\r\n\r\n    uint256 index = pool.getReserveNormalizedIncome();\r\n\r\n    super._transfer(from, to, amount.rayDiv(index));\r\n\r\n    emit BalanceTransfer(from, to, amount, index);\r\n  }\r\n}\r\n"
    },
    "contracts/tokenization/VariableDebtToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./base/DebtTokenBase.sol\";\r\nimport \"../helper/WadRayMath.sol\";\r\nimport \"../helper/MathUtils.sol\";\r\nimport \"../interfaces/ILendingPool.sol\";\r\nimport \"../interfaces/IVariableDebtToken.sol\";\r\n\r\n/**\r\n * @title VariableDebtToken\r\n * @notice Implements a variable debt token to track the borrowing positions of users\r\n * at variable rate mode\r\n **/\r\ncontract VariableDebtToken is Initializable, DebtTokenBase, IVariableDebtToken {\r\n    using SafeMath for uint256;\r\n    using WadRayMath for uint256; \r\n\r\n    ILendingPool internal _pool;\r\n\r\n  function initialize(\r\n    ILendingPool pool,\r\n    string calldata tokenName,\r\n    string calldata tokenSymbol\r\n  ) external initializer {\r\n    _pool = pool;\r\n    _setName(tokenName);\r\n    _setSymbol(tokenSymbol);\r\n  }\r\n\r\n   /**\r\n   * @dev Calculates the accumulated debt balance of the user\r\n   * @return The debt balance of the user\r\n   **/\r\n  function balanceOf(address user) public view virtual override returns (uint256) {\r\n    uint256 scaledBalance = super.balanceOf(user);\r\n\r\n    if (scaledBalance == 0) {\r\n      return 0;\r\n    }\r\n\r\n    return scaledBalance.rayMul(_pool.getReserveNormalizedVariableDebt());\r\n  }\r\n\r\n  /**\r\n   * @dev Mints debt token to the `onBehalfOf` address\r\n   * -  Only callable by the LendingPool\r\n   * @param user The address receiving the borrowed underlying and the debt tokens\r\n   * @param amount The amount of debt being minted\r\n   * @param index The variable debt index of the reserve\r\n   **/\r\n  function mint(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external override onlyLendingPool {\r\n\r\n    uint256 amountScaled = amount.rayDiv(index);\r\n\r\n    _mint(user, amountScaled);\r\n\r\n    emit Transfer(address(0), user, amount);\r\n    emit Mint(user, amount, index);\r\n  }\r\n\r\n  /**\r\n   * @dev Burns user variable debt\r\n   * - Only callable by the LendingPool\r\n   * @param user The user whose debt is getting burned\r\n   * @param amount The amount getting burned\r\n   * @param index The variable debt index of the reserve\r\n   **/\r\n  function burn(\r\n    address user,\r\n    uint256 amount,\r\n    uint256 index\r\n  ) external override onlyLendingPool {\r\n    uint256 amountScaled = amount.rayDiv(index);\r\n    require(amountScaled != 0, \"INVALID_BURN_AMOUNT\");\r\n\r\n    _burn(user, amountScaled);\r\n\r\n    emit Transfer(user, address(0), amount);\r\n    emit Burn(user, amount, index);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the principal debt balance of the user from\r\n   * @return The debt balance of the user since the last burn/mint action\r\n   **/\r\n  function scaledBalanceOf(address user) public view virtual returns (uint256) {\r\n    return super.balanceOf(user);\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the total supply of the variable debt token. Represents the total debt accrued by the users\r\n   * @return The total supply\r\n   **/\r\n  function totalSupply() public view virtual override returns (uint256) {\r\n    return super.totalSupply().rayMul(_pool.getReserveNormalizedVariableDebt());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\r\n   * @return the scaled total supply\r\n   **/\r\n  function scaledTotalSupply() public view virtual returns (uint256) {\r\n    return super.totalSupply();\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the principal balance of the user and principal total supply.\r\n   * @param user The address of the user\r\n   * @return The principal balance of the user\r\n   * @return The principal total supply\r\n   **/\r\n  function getScaledUserBalanceAndSupply(address user)\r\n    external\r\n    view\r\n    returns (uint256, uint256)\r\n  {\r\n    return (super.balanceOf(user), super.totalSupply());\r\n  }\r\n\r\n  /**\r\n   * @dev Returns the address of the lending pool where this aToken is used\r\n   **/\r\n  function POOL() public view returns (ILendingPool) {\r\n    return _pool;\r\n  }\r\n\r\n  function _getLendingPool() internal view override returns (ILendingPool) {\r\n    return _pool;\r\n  }\r\n}"
    },
    "contracts/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: agpl-3.0\r\npragma solidity 0.8.9;\r\n\r\nlibrary DataTypes {\r\n    struct ReserveData {\r\n        //the liquidity index. Expressed in ray\r\n        uint128 liquidityIndex;\r\n        //variable borrow index. Expressed in ray\r\n        uint128 variableBorrowIndex;\r\n        //the current supply rate. Expressed in ray\r\n        uint128 currentLiquidityRate;\r\n        //the current variable borrow rate. Expressed in ray\r\n        uint128 currentVariableBorrowRate;\r\n        uint40 lastUpdateTimestamp;\r\n        // fee percentage\r\n        uint16 reserveFactor; \r\n        // base point 10000\r\n        uint16 ltv;\r\n        uint16 liquidationThreshold;\r\n        //tokens addresses\r\n        address sFilTokenAddress;\r\n        address variableDebtTokenAddress;\r\n        //address of the interest rate strategy\r\n        address interestRateStrategyAddress;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}