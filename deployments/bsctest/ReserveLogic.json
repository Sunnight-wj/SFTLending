{
  "address": "0x872f76C032f899976FC1C4De12E6A48fE3Cc02B8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "variableBorrowRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "variableBorrowIndex",
          "type": "uint256"
        }
      ],
      "name": "ReserveDataUpdated",
      "type": "event"
    }
  ],
  "transactionHash": "0x2ef237d57a9cf901d93ea5c6fa2d21d8b3d3a244c1e5804f4fe11f2bc28df97e",
  "receipt": {
    "to": null,
    "from": "0x49554923b9361e158Fb267B436f843a4f537D53a",
    "contractAddress": "0x872f76C032f899976FC1C4De12E6A48fE3Cc02B8",
    "transactionIndex": 5,
    "gasUsed": "72217",
    "logsBloom": "0x
    "blockHash": "0x2ea97d58dbe296ccbfa9282a89caf18bd175ecb31df796b318762e06ce40ae78",
    "transactionHash": "0x2ef237d57a9cf901d93ea5c6fa2d21d8b3d3a244c1e5804f4fe11f2bc28df97e",
    "logs": [],
    "blockNumber": 30815981,
    "cumulativeGasUsed": "1217611",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "516813ffcda9f29a5ad99ec0e22b25cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"variableBorrowIndex\",\"type\":\"uint256\"}],\"name\":\"ReserveDataUpdated\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"ReserveDataUpdated(address,uint256,uint256,uint256,uint256)\":{\"details\":\"Emitted when the state of a reserve is updated\",\"params\":{\"asset\":\"The address of the underlying asset of the reserve\",\"liquidityIndex\":\"The new liquidity index\",\"liquidityRate\":\"The new liquidity rate\",\"variableBorrowIndex\":\"The new variable borrow index*\",\"variableBorrowRate\":\"The new variable borrow rate\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lendingpool/logic/ReserveLogic.sol\":\"ReserveLogic\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/helper/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"./WadRayMath.sol\\\";\\r\\n\\r\\nlibrary MathUtils {\\r\\n  using SafeMath for uint256;\\r\\n  using WadRayMath for uint256;\\r\\n\\r\\n  /// @dev Ignoring leap years\\r\\n  uint256 internal constant SECONDS_PER_YEAR = 365 days;\\r\\n\\r\\n  /**\\r\\n   * @dev Function to calculate the interest accumulated using a linear interest rate formula\\r\\n   * @param rate The interest rate, in ray\\r\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n   * @return The interest rate linearly accumulated during the timeDelta, in ray\\r\\n   **/\\r\\n\\r\\n  function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    //solium-disable-next-line\\r\\n    uint256 timeDifference = block.timestamp.sub(uint256(lastUpdateTimestamp));\\r\\n\\r\\n    return (rate.mul(timeDifference) / SECONDS_PER_YEAR).add(WadRayMath.ray());\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Function to calculate the interest using a compounded interest rate formula\\r\\n   * To avoid expensive exponentiation, the calculation is performed using a binomial approximation:\\r\\n   *\\r\\n   *  (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3...\\r\\n   *\\r\\n   * The approximation slightly underpays liquidity providers and undercharges borrowers, with the advantage of great gas cost reductions\\r\\n   * The whitepaper contains reference to the approximation and a table showing the margin of error per different time periods\\r\\n   *\\r\\n   * @param rate The interest rate, in ray\\r\\n   * @param lastUpdateTimestamp The timestamp of the last update of the interest\\r\\n   * @return The interest rate compounded during the timeDelta, in ray\\r\\n   **/\\r\\n  function calculateCompoundedInterest(\\r\\n    uint256 rate,\\r\\n    uint40 lastUpdateTimestamp,\\r\\n    uint256 currentTimestamp\\r\\n  ) internal pure returns (uint256) {\\r\\n    //solium-disable-next-line\\r\\n    uint256 exp = currentTimestamp.sub(uint256(lastUpdateTimestamp));\\r\\n\\r\\n    if (exp == 0) {\\r\\n      return WadRayMath.ray();\\r\\n    }\\r\\n\\r\\n    uint256 expMinusOne = exp - 1;\\r\\n\\r\\n    uint256 expMinusTwo = exp > 2 ? exp - 2 : 0;\\r\\n\\r\\n    uint256 ratePerSecond = rate / SECONDS_PER_YEAR;\\r\\n\\r\\n    uint256 basePowerTwo = ratePerSecond.rayMul(ratePerSecond);\\r\\n    uint256 basePowerThree = basePowerTwo.rayMul(ratePerSecond);\\r\\n\\r\\n    uint256 secondTerm = exp.mul(expMinusOne).mul(basePowerTwo) / 2;\\r\\n    uint256 thirdTerm = exp.mul(expMinusOne).mul(expMinusTwo).mul(basePowerThree) / 6;\\r\\n\\r\\n    return WadRayMath.ray().add(ratePerSecond.mul(exp)).add(secondTerm).add(thirdTerm);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Calculates the compounded interest between the timestamp of the last update and the current block timestamp\\r\\n   * @param rate The interest rate (in ray)\\r\\n   * @param lastUpdateTimestamp The timestamp from which the interest accumulation needs to be calculated\\r\\n   **/\\r\\n  function calculateCompoundedInterest(uint256 rate, uint40 lastUpdateTimestamp)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return calculateCompoundedInterest(rate, lastUpdateTimestamp, block.timestamp);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xe6e81edc1fea37c8f7d9aed7571f34d7d2bd13b338bb1ccd5b21392bac229ee6\",\"license\":\"MIT\"},\"contracts/helper/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title PercentageMath library\\r\\n * @notice Provides functions to perform percentage calculations\\r\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\r\\n * @dev Operations are rounded half up\\r\\n **/\\r\\n\\r\\nlibrary PercentageMath {\\r\\n  uint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\r\\n  uint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage multiplication\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The percentage of value\\r\\n   **/\\r\\n  function percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    if (value == 0 || percentage == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(\\r\\n      value <= (type(uint256).max - HALF_PERCENT) / percentage,\\r\\n      \\\"MULTIPLICATION_OVERFLOW\\\"\\r\\n    );\\r\\n\\r\\n    return (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Executes a percentage division\\r\\n   * @param value The value of which the percentage needs to be calculated\\r\\n   * @param percentage The percentage of the value to be calculated\\r\\n   * @return The value divided the percentage\\r\\n   **/\\r\\n  function percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\r\\n    require(percentage != 0, \\\"MATH_DIVISION_BY_ZERO\\\");\\r\\n    uint256 halfPercentage = percentage / 2;\\r\\n\\r\\n    require(\\r\\n      value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR,\\r\\n      \\\"MULTIPLICATION_OVERFLOW\\\"\\r\\n    );\\r\\n\\r\\n    return (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xad1b7bc18889bfa1d4b4ccf4b0470ce6d4f8b498eadcfa1910b5307f6ebe86b1\",\"license\":\"MIT\"},\"contracts/helper/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\n/**\\r\\n * @title WadRayMath library\\r\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\r\\n **/\\r\\n\\r\\nlibrary WadRayMath {\\r\\n  uint256 internal constant WAD = 1e18;\\r\\n  uint256 internal constant halfWAD = WAD / 2;\\r\\n\\r\\n  uint256 internal constant RAY = 1e27;\\r\\n  uint256 internal constant halfRAY = RAY / 2;\\r\\n\\r\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\r\\n\\r\\n  /**\\r\\n   * @return One ray, 1e27\\r\\n   **/\\r\\n  function ray() internal pure returns (uint256) {\\r\\n    return RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return One wad, 1e18\\r\\n   **/\\r\\n\\r\\n  function wad() internal pure returns (uint256) {\\r\\n    return WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e27/2\\r\\n   **/\\r\\n  function halfRay() internal pure returns (uint256) {\\r\\n    return halfRAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @return Half ray, 1e18/2\\r\\n   **/\\r\\n  function halfWad() internal pure returns (uint256) {\\r\\n    return halfWAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a*b, in wad\\r\\n   **/\\r\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - halfWAD) / b, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * b + halfWAD) / WAD;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two wad, rounding half up to the nearest wad\\r\\n   * @param a Wad\\r\\n   * @param b Wad\\r\\n   * @return The result of a/b, in wad\\r\\n   **/\\r\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"DIVISION_BY_ZERO\\\");\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / WAD, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * WAD + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Multiplies two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a*b, in ray\\r\\n   **/\\r\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    if (a == 0 || b == 0) {\\r\\n      return 0;\\r\\n    }\\r\\n\\r\\n    require(a <= (type(uint256).max - halfRAY) / b, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * b + halfRAY) / RAY;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Divides two ray, rounding half up to the nearest ray\\r\\n   * @param a Ray\\r\\n   * @param b Ray\\r\\n   * @return The result of a/b, in ray\\r\\n   **/\\r\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n    require(b != 0, \\\"DIVISION_BY_ZERO\\\");\\r\\n    uint256 halfB = b / 2;\\r\\n\\r\\n    require(a <= (type(uint256).max - halfB) / RAY, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n\\r\\n    return (a * RAY + halfB) / b;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Casts ray down to wad\\r\\n   * @param a Ray\\r\\n   * @return a casted to wad, rounded half up to the nearest wad\\r\\n   **/\\r\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\r\\n    uint256 result = halfRatio + a;\\r\\n    require(result >= halfRatio, \\\"ADDITION_OVERFLOW\\\");\\r\\n\\r\\n    return result / WAD_RAY_RATIO;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Converts wad up to ray\\r\\n   * @param a Wad\\r\\n   * @return a converted in ray\\r\\n   **/\\r\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\r\\n    uint256 result = a * WAD_RAY_RATIO;\\r\\n    require(result / WAD_RAY_RATIO == a, \\\"MULTIPLICATION_OVERFLOW\\\");\\r\\n    return result;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x66ec27b84b1e5fd32fcb02768b1794d147508a9ae007d7ad5c30231801b2c9f1\",\"license\":\"MIT\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IReserveInterestRateStrategy {\\r\\n\\r\\n  function baseVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\r\\n\\r\\n  function calculateInterestRates(\\r\\n    uint256 availableLiquidity,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 reserveFactor\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256,\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  function calculateInterestRates(\\r\\n    address reserve,\\r\\n    address aToken,\\r\\n    uint256 liquidityAdded,\\r\\n    uint256 liquidityTaken,\\r\\n    uint256 totalVariableDebt,\\r\\n    uint256 reserveFactor\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 liquidityRate,\\r\\n      uint256 variableBorrowRate\\r\\n    );\\r\\n}\",\"keccak256\":\"0x328119369d84470715d113a584fbbaa6631d6648a7da6a5d8fd6d8dff08e2b7a\",\"license\":\"MIT\"},\"contracts/interfaces/ISFilToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\ninterface ISFilToken is IERC20, IScaledBalanceToken {\\r\\n\\r\\n    /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param from The address performing the mint\\r\\n   * @param value The amount being\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed from, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints `amount` sFIL to `user`\\r\\n   * @param user The address receiving the minted tokens\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   */\\r\\n  function mint(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n\\r\\n   /**\\r\\n   * @dev Emitted after sFIL are burned\\r\\n   * @param from The owner of the sFIL, getting them burned\\r\\n   * @param target The address that will receive the underlying\\r\\n   * @param value The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted during the transfer action\\r\\n   * @param from The user whose tokens are being transferred\\r\\n   * @param to The recipient\\r\\n   * @param value The amount being transferred\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns sFIL from `user` and sends the equivalent amount of FIL to `receiver`\\r\\n   * @param user The owner of the sFIL, getting them burned\\r\\n   * @param receiver The address that will receive the FIL\\r\\n   * @param amount The amount being burned\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   **/\\r\\n  function burn(\\r\\n    address user,\\r\\n    address receiver,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Mints sFIL to the reserve treasury\\r\\n   * @param amount The amount of tokens getting minted\\r\\n   * @param index The new liquidity index of the reserve\\r\\n   */\\r\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\r\\n\\r\\n\\r\\n  /**\\r\\n   * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\r\\n   * assets in borrow(), withdraw()\\r\\n   * @param user The recipient of the underlying\\r\\n   * @param amount The amount getting transferred\\r\\n   * @return The amount transferred\\r\\n   **/\\r\\n  function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the address of the underlying asset\\r\\n   **/\\r\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\r\\n\\r\\n  function updateTreasuryAddress(address newTreasuryAddress) external;\\r\\n    \\r\\n}\",\"keccak256\":\"0x4cc2d00941b27fb1aade83dec2b9f35a359edecd1b66f159a3ac37a369599d59\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\ninterface IScaledBalanceToken {\\r\\n  /**\\r\\n   * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\r\\n   * updated stored balance divided by the reserve's liquidity index at the moment of the update\\r\\n   * @param user The user whose balance is calculated\\r\\n   * @return The scaled balance of the user\\r\\n   **/\\r\\n  function scaledBalanceOf(address user) external view returns (uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the scaled balance of the user and the scaled total supply.\\r\\n   * @param user The address of the user\\r\\n   * @return The scaled balance of the user\\r\\n   * @return The scaled balance and the scaled total supply\\r\\n   **/\\r\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\r\\n   * @return The scaled total supply\\r\\n   **/\\r\\n  function scaledTotalSupply() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xb898eb43a9e67097a24e4c6a63b00e8f0e77e33a46677ed5d6529207282dc97b\",\"license\":\"MIT\"},\"contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nimport \\\"./IScaledBalanceToken.sol\\\";\\r\\n\\r\\ninterface IVariableDebtToken is IScaledBalanceToken {\\r\\n  /**\\r\\n   * @dev Emitted after the mint action\\r\\n   * @param user The address performing the mint\\r\\n   * @param value The amount to be minted\\r\\n   * @param index The last index of the reserve\\r\\n   **/\\r\\n  event Mint(address indexed user, uint256 value, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Mints debt token to the `onBehalfOf` address\\r\\n   * @param user The address receiving the borrowed underlying and the debt token\\r\\n   * @param amount The amount of debt being minted\\r\\n   * @param index The variable debt index of the reserve\\r\\n   **/\\r\\n  function mint(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n\\r\\n  /**\\r\\n   * @dev Emitted when variable debt is burnt\\r\\n   * @param user The user which debt has been burned\\r\\n   * @param amount The amount of debt being burned\\r\\n   * @param index The index of the user\\r\\n   **/\\r\\n  event Burn(address indexed user, uint256 amount, uint256 index);\\r\\n\\r\\n  /**\\r\\n   * @dev Burns user variable debt\\r\\n   * @param user The user which debt is burnt\\r\\n   * @param index The variable debt index of the reserve\\r\\n   **/\\r\\n  function burn(\\r\\n    address user,\\r\\n    uint256 amount,\\r\\n    uint256 index\\r\\n  ) external;\\r\\n}\",\"keccak256\":\"0x264b53c527d943ba2bf623bc81100ba006399d6226840fc5eaf262abd9e98647\",\"license\":\"MIT\"},\"contracts/lendingpool/logic/ReserveLogic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\r\\nimport \\\"../../interfaces/IVariableDebtToken.sol\\\";\\r\\nimport \\\"../../interfaces/ISFilToken.sol\\\";\\r\\nimport \\\"../../helper/WadRayMath.sol\\\";\\r\\nimport \\\"../../helper/PercentageMath.sol\\\";\\r\\nimport \\\"../../helper/MathUtils.sol\\\";\\r\\nimport \\\"../../types/DataTypes.sol\\\";\\r\\n\\r\\nlibrary ReserveLogic {\\r\\n    using SafeMath for uint256;\\r\\n    using WadRayMath for uint256;\\r\\n    using PercentageMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    using ReserveLogic for DataTypes.ReserveData;\\r\\n\\r\\n    /**\\r\\n   * @dev Emitted when the state of a reserve is updated\\r\\n   * @param asset The address of the underlying asset of the reserve\\r\\n   * @param liquidityRate The new liquidity rate\\r\\n   * @param variableBorrowRate The new variable borrow rate\\r\\n   * @param liquidityIndex The new liquidity index\\r\\n   * @param variableBorrowIndex The new variable borrow index\\r\\n   **/\\r\\n  event ReserveDataUpdated(\\r\\n    address indexed asset,\\r\\n    uint256 liquidityRate,\\r\\n    uint256 variableBorrowRate,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex\\r\\n  );\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ongoing normalized income for the reserve\\r\\n   * A value of 1e27 means there is no income. As time passes, the income is accrued\\r\\n   * A value of 2*1e27 means for each unit of asset one unit of income has been accrued\\r\\n   * @param reserve The reserve object\\r\\n   * @return the normalized income. expressed in ray\\r\\n   **/\\r\\n  function getNormalizedIncome(DataTypes.ReserveData storage reserve)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    if (timestamp == uint40(block.timestamp)) {\\r\\n      //if the index was updated in the same block, no need to perform any calculation\\r\\n      return reserve.liquidityIndex;\\r\\n    }\\r\\n\\r\\n    uint256 cumulated =\\r\\n      MathUtils.calculateLinearInterest(reserve.currentLiquidityRate, timestamp).rayMul(\\r\\n        reserve.liquidityIndex\\r\\n      );\\r\\n    return cumulated;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the ongoing normalized variable debt for the reserve\\r\\n   * A value of 1e27 means there is no debt. As time passes, the income is accrued\\r\\n   * A value of 2*1e27 means that for each unit of debt, one unit worth of interest has been accumulated\\r\\n   * @param reserve The reserve object\\r\\n   * @return The normalized variable debt. expressed in ray\\r\\n   **/\\r\\n  function getNormalizedDebt(DataTypes.ReserveData storage reserve)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    uint40 timestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    if (timestamp == uint40(block.timestamp)) {\\r\\n      //if the index was updated in the same block, no need to perform any calculation\\r\\n      return reserve.variableBorrowIndex;\\r\\n    }\\r\\n\\r\\n    uint256 cumulated =\\r\\n      MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp).rayMul(\\r\\n        reserve.variableBorrowIndex\\r\\n      );\\r\\n\\r\\n    return cumulated;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the liquidity cumulative index and the variable borrow index.\\r\\n   * @param reserve the reserve object\\r\\n   **/\\r\\n  function updateState(DataTypes.ReserveData storage reserve) internal {\\r\\n    uint256 scaledVariableDebt =\\r\\n      IVariableDebtToken(reserve.variableDebtTokenAddress).scaledTotalSupply();\\r\\n    uint256 previousVariableBorrowIndex = reserve.variableBorrowIndex;\\r\\n    uint256 previousLiquidityIndex = reserve.liquidityIndex;\\r\\n    uint40 lastUpdatedTimestamp = reserve.lastUpdateTimestamp;\\r\\n\\r\\n    (uint256 newLiquidityIndex, uint256 newVariableBorrowIndex) =\\r\\n      _updateIndexes(\\r\\n        reserve,\\r\\n        scaledVariableDebt,\\r\\n        previousLiquidityIndex,\\r\\n        previousVariableBorrowIndex,\\r\\n        lastUpdatedTimestamp\\r\\n      );\\r\\n\\r\\n    _mintToTreasury(\\r\\n      reserve,\\r\\n      scaledVariableDebt,\\r\\n      previousVariableBorrowIndex,\\r\\n      newLiquidityIndex,\\r\\n      newVariableBorrowIndex\\r\\n    );\\r\\n  }\\r\\n\\r\\n\\r\\n  struct UpdateInterestRatesLocalVars {\\r\\n    uint256 availableLiquidity;\\r\\n    uint256 newLiquidityRate;\\r\\n    uint256 newVariableRate;\\r\\n    uint256 totalVariableDebt;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve the current variable borrow rate and the current liquidity rate\\r\\n   * @param reserve The address of the reserve to be updated\\r\\n   * @param liquidityAdded The amount of liquidity added to the protocol (deposit or repay) in the previous action\\r\\n   * @param liquidityTaken The amount of liquidity taken from the protocol (redeem or borrow)\\r\\n   **/\\r\\n  function updateInterestRates(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    address reserveAddress,\\r\\n    address sFilTokenAddress,\\r\\n    uint256 liquidityAdded,\\r\\n    uint256 liquidityTaken\\r\\n  ) internal {\\r\\n    UpdateInterestRatesLocalVars memory vars;\\r\\n\\r\\n    //calculates the total variable debt locally using the scaled total supply instead\\r\\n    //of totalSupply(), as it's noticeably cheaper. Also, the index has been\\r\\n    //updated by the previous updateState() call\\r\\n    vars.totalVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress)\\r\\n      .scaledTotalSupply()\\r\\n      .rayMul(reserve.variableBorrowIndex);\\r\\n\\r\\n    (\\r\\n      vars.newLiquidityRate,\\r\\n      vars.newVariableRate\\r\\n    ) = IReserveInterestRateStrategy(reserve.interestRateStrategyAddress).calculateInterestRates(\\r\\n      reserveAddress,\\r\\n      sFilTokenAddress,\\r\\n      liquidityAdded,\\r\\n      liquidityTaken,\\r\\n      vars.totalVariableDebt,\\r\\n      reserve.reserveFactor\\r\\n    );\\r\\n    require(vars.newLiquidityRate <= type(uint128).max, \\\"LIQUIDITY_RATE_OVERFLOW\\\");\\r\\n    require(vars.newVariableRate <= type(uint128).max, \\\"VARIABLE_BORROW_RATE_OVERFLOW\\\");\\r\\n\\r\\n    reserve.currentLiquidityRate = uint128(vars.newLiquidityRate);\\r\\n    reserve.currentVariableBorrowRate = uint128(vars.newVariableRate);\\r\\n\\r\\n    emit ReserveDataUpdated(\\r\\n      reserveAddress,\\r\\n      vars.newLiquidityRate,\\r\\n      vars.newVariableRate,\\r\\n      reserve.liquidityIndex,\\r\\n      reserve.variableBorrowIndex\\r\\n    );\\r\\n  }\\r\\n\\r\\n  struct MintToTreasuryLocalVars {\\r\\n    uint256 currentVariableDebt;\\r\\n    uint256 previousVariableDebt;\\r\\n    uint256 totalDebtAccrued;\\r\\n    uint256 amountToMint;\\r\\n    uint256 reserveFactor;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Mints part of the repaid interest to the reserve treasury as a function of the reserveFactor\\r\\n   * @param reserve The reserve reserve to be updated\\r\\n   * @param scaledVariableDebt The current scaled total variable debt\\r\\n   * @param previousVariableBorrowIndex The variable borrow index before the last accumulation of the interest\\r\\n   * @param newLiquidityIndex The new liquidity index\\r\\n   * @param newVariableBorrowIndex The variable borrow index after the last accumulation of the interest\\r\\n   **/\\r\\n  function _mintToTreasury(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 scaledVariableDebt,\\r\\n    uint256 previousVariableBorrowIndex,\\r\\n    uint256 newLiquidityIndex,\\r\\n    uint256 newVariableBorrowIndex\\r\\n  ) internal {\\r\\n    MintToTreasuryLocalVars memory vars;\\r\\n\\r\\n    vars.reserveFactor = reserve.reserveFactor;\\r\\n\\r\\n    if (vars.reserveFactor == 0) {\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    //calculate the last principal variable debt\\r\\n    vars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\\r\\n\\r\\n    //calculate the new total supply after accumulation of the index\\r\\n    vars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\\r\\n\\r\\n    //debt accrued is the sum of the current debt minus the sum of the debt at the last update\\r\\n    vars.totalDebtAccrued = vars.currentVariableDebt.sub(vars.previousVariableDebt);\\r\\n\\r\\n    vars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\\r\\n\\r\\n    if (vars.amountToMint != 0) {\\r\\n      ISFilToken(reserve.sFilTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Updates the reserve indexes and the timestamp of the update\\r\\n   * @param reserve The reserve to be updated\\r\\n   * @param scaledVariableDebt The scaled variable debt\\r\\n   * @param liquidityIndex The last stored liquidity index\\r\\n   * @param variableBorrowIndex The last stored variable borrow index\\r\\n   **/\\r\\n  function _updateIndexes(\\r\\n    DataTypes.ReserveData storage reserve,\\r\\n    uint256 scaledVariableDebt,\\r\\n    uint256 liquidityIndex,\\r\\n    uint256 variableBorrowIndex,\\r\\n    uint40 timestamp\\r\\n  ) internal returns (uint256, uint256) {\\r\\n    uint256 currentLiquidityRate = reserve.currentLiquidityRate;\\r\\n\\r\\n    uint256 newLiquidityIndex = liquidityIndex;\\r\\n    uint256 newVariableBorrowIndex = variableBorrowIndex;\\r\\n\\r\\n    //only cumulating if there is any income being produced\\r\\n    if (currentLiquidityRate > 0) {\\r\\n      uint256 cumulatedLiquidityInterest =\\r\\n        MathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\\r\\n      newLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\\r\\n      require(newLiquidityIndex <= type(uint128).max, \\\"LIQUIDITY_INDEX_OVERFLOW\\\");\\r\\n\\r\\n      reserve.liquidityIndex = uint128(newLiquidityIndex);\\r\\n\\r\\n      //as the liquidity rate might come only from stable rate loans, we need to ensure\\r\\n      //that there is actual variable debt before accumulating\\r\\n      if (scaledVariableDebt != 0) {\\r\\n        uint256 cumulatedVariableBorrowInterest =\\r\\n          MathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp);\\r\\n        newVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\\r\\n        require(\\r\\n          newVariableBorrowIndex <= type(uint128).max,\\r\\n          \\\"VARIABLE_BORROW_INDEX_OVERFLOW\\\"\\r\\n        );\\r\\n        reserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    //solium-disable-next-line\\r\\n    reserve.lastUpdateTimestamp = uint40(block.timestamp);\\r\\n    return (newLiquidityIndex, newVariableBorrowIndex);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x2b831812d4edacc71e8b06e86e0297dc010d7d6228a28ecea77dd32657012f2f\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\r\\npragma solidity 0.8.9;\\r\\n\\r\\nlibrary DataTypes {\\r\\n    struct ReserveData {\\r\\n        //the liquidity index. Expressed in ray\\r\\n        uint128 liquidityIndex;\\r\\n        //variable borrow index. Expressed in ray\\r\\n        uint128 variableBorrowIndex;\\r\\n        //the current supply rate. Expressed in ray\\r\\n        uint128 currentLiquidityRate;\\r\\n        //the current variable borrow rate. Expressed in ray\\r\\n        uint128 currentVariableBorrowRate;\\r\\n        uint40 lastUpdateTimestamp;\\r\\n        // fee percentage\\r\\n        uint16 reserveFactor; \\r\\n        // base point 10000\\r\\n        uint16 ltv;\\r\\n        uint16 liquidationThreshold;\\r\\n        //tokens addresses\\r\\n        address sFilTokenAddress;\\r\\n        address variableDebtTokenAddress;\\r\\n        //address of the interest rate strategy\\r\\n        address interestRateStrategyAddress;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xbc3b0f7e784167a2139add05d4dedf7a3354a3ffa7fb20da2d8e9b5d076cb36e\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220706d301d19423fc6b4520fce6519629f75741fe533caece2c8e4b2fafdc36a7964736f6c63430008090033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220706d301d19423fc6b4520fce6519629f75741fe533caece2c8e4b2fafdc36a7964736f6c63430008090033",
  "devdoc": {
    "events": {
      "ReserveDataUpdated(address,uint256,uint256,uint256,uint256)": {
        "details": "Emitted when the state of a reserve is updated",
        "params": {
          "asset": "The address of the underlying asset of the reserve",
          "liquidityIndex": "The new liquidity index",
          "liquidityRate": "The new liquidity rate",
          "variableBorrowIndex": "The new variable borrow index*",
          "variableBorrowRate": "The new variable borrow rate"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}